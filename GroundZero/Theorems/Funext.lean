import GroundZero.Types.HEq

open GroundZero.Types.Id (ap)
open GroundZero.Types

/-
  The unit Interval I as Higher Inductive Type.
  Proof of functional extensionality from it.
  * HoTT 6.3

  It is primitive HIT.
  * HoTT, chapter 6, exercise 6.13
-/

namespace GroundZero.HITs
universe u v w

inductive I.rel : ùüê ‚Üí ùüê ‚Üí Prop
| mk (a b : ùüê) : rel a b

def I : Type := Quot I.rel
def Interval := I

namespace Interval
  hott def discrete : ùüê ‚Üí I := Quot.mk I.rel

  hott def i‚ÇÄ : I := discrete false
  hott def i‚ÇÅ : I := discrete true

  @[hottAxiom] opaque seg : i‚ÇÄ = i‚ÇÅ :=
  trustHigherCtor (Quot.sound (I.rel.mk false true))

  instance : OfNat I Nat.zero := ‚ü®i‚ÇÄ‚ü©
  instance : OfNat I (Nat.succ Nat.zero) := ‚ü®i‚ÇÅ‚ü©

  hott def left  := i‚ÇÄ
  hott def right := i‚ÇÅ

  hott def zero := i‚ÇÄ
  hott def one  := i‚ÇÅ

  attribute [reducible] left right zero one

  @[hottAxiom, eliminator] def ind {B : I ‚Üí Type u} (b‚ÇÄ : B i‚ÇÄ) (b‚ÇÅ : B i‚ÇÅ) (s : b‚ÇÄ =[seg] b‚ÇÅ) (x : I) : B x :=
  begin
    refine Quot.hrecOn x ?_ ?_; apply Œª x, @Bool.casesOn (B ‚àò discrete) x b‚ÇÄ b‚ÇÅ;
    { intros a b; induction a <;> induction b <;> intro H;
      { apply HEq.refl };
      { apply @HEq.fromPathover I B _ _ seg _ _ s };
      { apply HEq.symm; apply @HEq.fromPathover I B _ _ seg _ _ s };
      { apply HEq.refl } }
  end

  @[inline] hott def rec {B : Type u} (b‚ÇÄ : B) (b‚ÇÅ : B) (s : b‚ÇÄ = b‚ÇÅ) : I ‚Üí B :=
  ind b‚ÇÄ b‚ÇÅ (Equiv.pathoverOfEq seg s)

  axiom indŒ≤rule {B : I ‚Üí Type u} (b‚ÇÄ : B i‚ÇÄ) (b‚ÇÅ : B i‚ÇÅ)
    (s : b‚ÇÄ =[seg] b‚ÇÅ) : Equiv.apd (ind b‚ÇÄ b‚ÇÅ s) seg = s

  noncomputable hott def recŒ≤rule {B : Type u} (b‚ÇÄ b‚ÇÅ : B)
    (s : b‚ÇÄ = b‚ÇÅ) : ap (rec b‚ÇÄ b‚ÇÅ s) seg = s :=
  begin
    apply Equiv.pathoverOfEqInj seg; transitivity;
    symmetry; apply Equiv.apdOverConstantFamily; apply indŒ≤rule
  end

  hott def homotopy {A : Type u} {B : A ‚Üí Type v} {f g : Œ† x, B x}
    (p : f ~ g) (x : A) : I ‚Üí B x :=
  Interval.rec (f x) (g x) (p x)

  hott def funext {A : Type u} {B : A ‚Üí Type v}
    {f g : Œ† x, B x} (p : f ~ g) : f = g :=
  @ap I (Œ† x, B x) 0 1 (Œª i x, homotopy p x i) seg

  hott def happly {A : Type u} {B : A ‚Üí Type v}
    {f g : Œ† x, B x} (p : f = g) : f ~ g :=
  Equiv.transport (Œª g, f ~ g) p (Equiv.Homotopy.id f)

  hott def happlyRev {A : Type u} {B : A ‚Üí Type v}
    {f g : Œ† x, B x} (p : f = g) : happly p‚Åª¬π = Equiv.Homotopy.symm _ _ (happly p) :=
  begin induction p; reflexivity end

  hott def mapHapply {A : Type u} {B : Type v} {C : Type w} {a b : A} {c : B}
    (f : A ‚Üí B ‚Üí C) (p : a = b) : ap (f ¬∑ c) p = happly (ap f p) c :=
  begin induction p; reflexivity end
end Interval

end GroundZero.HITs
