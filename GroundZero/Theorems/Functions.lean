import GroundZero.HITs.Merely

open GroundZero.Types GroundZero.HITs
open GroundZero.Types.Id (ap)
open GroundZero.Structures

namespace GroundZero.Theorems.Functions
universe u v

hott definition injective {A : Type u} {B : Type v} (f : A ‚Üí B) :=
Œ† x y, f x = f y ‚Üí x = y

hott definition surjective {A : Type u} {B : Type v} (f : A ‚Üí B) :=
Œ† b, ‚à•Œ£ a, f a = b‚à•

hott definition Surjection (A : Type u) (B : Type v) :=
Œ£ (f : A ‚Üí B), surjective f
infixr:70 " ‚Ü† " => Surjection

instance (A : Type u) (B : Type v) : CoeFun (A ‚Ü† B) (Œª _, A ‚Üí B) := ‚ü®Sigma.fst‚ü©

hott definition fibInh {A : Type u} {B : Type v} (f : A ‚Üí B) :=
Œª b, ‚à•fib f b‚à•

hott definition Ran {A : Type u} {B : Type v} (f : A ‚Üí B) :=
total (fibInh f)

hott definition cut {A : Type u} {B : Type v} (f : A ‚Üí B) : A ‚Üí Ran f :=
Œª x, ‚ü®f x, |‚ü®x, idp (f x)‚ü©|‚ü©

hott lemma cutIsSurj {A : Type u} {B : Type v} (f : A ‚Üí B) : surjective (cut f) :=
begin
  intro ‚ü®x, (H : ‚à•_‚à•)‚ü©; induction H;
  { case elemœÄ G =>
    apply Merely.elem; existsi G.1; fapply Sigma.prod;
    exact G.2; apply Merely.uniq };
  apply Merely.uniq
end

hott definition Ran.subset {A : Type u} {B : Type v} (f : A ‚Üí B) : Ran f ‚Üí B :=
Sigma.fst

hott definition Ran.incl {A : Type u} {B : Type v} {f : A ‚Üí B} (H : surjective f) : B ‚Üí Ran f :=
Œª x, ‚ü®x, H x‚ü©

hott lemma surjImplRanEqv {A : Type u} {B : Type v} (f : A ‚Üí B) (H : surjective f) : Ran f ‚âÉ B :=
begin
  existsi Sigma.fst; fapply Prod.mk <;> existsi Ran.incl H;
  { intro ‚ü®_, _‚ü©; fapply Sigma.prod; reflexivity; apply Merely.uniq };
  { intro; reflexivity }
end

hott definition ranConst {A : Type u} (a : A) {B : Type v} (b : B) : Ran (Function.const A b) :=
‚ü®b, |‚ü®a, idp b‚ü©|‚ü©

hott lemma ranConstEqv {A : Type u} (a : A) {B : Type v}
  (H : hset B) (b : B) : Ran (Function.const A b) ‚âÉ ùüè :=
begin
  existsi (Œª _, ‚òÖ); fapply Prod.mk <;> existsi (Œª _, ranConst a b);
  { intro ‚ü®b', (G : ‚à•_‚à•)‚ü©; fapply Sigma.prod; change b = b';
    induction G; { case elemœÄ w => exact w.2 };
    apply H; apply Merely.uniq };
  { intro ‚òÖ; reflexivity }
end

hott definition isEmbedding {A : Type u} {B : Type v} (f : A ‚Üí B) :=
Œ† x y, @Equiv.biinv (x = y) (f x = f y) (ap f)

hott definition Embedding (A : Type u) (B : Type v) :=
Œ£ (f : A ‚Üí B), isEmbedding f

infix:55 " ‚Ü™ " => Embedding

section
  variable {A : Type u} {B : Type v} (f : A ‚Ü™ B)

  hott abbreviation Embedding.ap : A ‚Üí B := f.1

  hott abbreviation Embedding.eqv (x y : A) : (x = y) ‚âÉ (f.ap x = f.ap y) :=
  ‚ü®Id.ap f.ap, f.2 x y‚ü©
end

hott theorem ntypeOverEmbedding {A : Type u} {B : Type v} (f : A ‚Ü™ B) (n : ‚Ñï‚Çã‚ÇÇ) :
  is-(hlevel.succ n)-type B ‚Üí is-(hlevel.succ n)-type A :=
begin
  intros H x y; apply ntypeRespectsEquiv; apply Equiv.symm;
  existsi ap f.1; apply f.2; apply H
end

hott definition eqvMapForward {A : Type u} {B : Type v} (e : A ‚âÉ B)
  (x y : A) (p : e x = e y) : x = y :=
(e.leftForward x)‚Åª¬π ‚¨ù (@ap B A _ _ e.left p) ‚¨ù (e.leftForward y)

hott lemma sigmaPropEq {A : Type u} {B : A ‚Üí Type v}
  (H : Œ† x, prop (B x)) {x y : Sigma B} (p : x.1 = y.1) : x = y :=
begin fapply Sigma.prod; exact p; apply H end

hott lemma propSigmaEquiv {A : Type u} {B : A ‚Üí Type v} (H : Œ† x, prop (B x))
  (x y : Œ£ x, B x) : (x = y) ‚âÉ (x.1 = y.1) :=
begin
  apply Equiv.trans; apply Sigma.sigmaPath;
  apply Equiv.trans; apply Sigma.respectsEquiv;
  { intro; apply contrEquivUnit.{_, 1}; fapply Sigma.mk;
    apply H; intro; apply propIsSet; apply H };
  apply Equiv.trans; apply Sigma.const; apply unitProdEquiv
end

hott definition propSigmaEmbedding {A : Type u} {B : A ‚Üí Type v}
  (H : Œ† x, prop (B x)) : (Œ£ x, B x) ‚Ü™ A :=
begin
  existsi Sigma.fst; intro x y;
  apply Equiv.transport Equiv.biinv _ (propSigmaEquiv H x y).2;
  apply Theorems.funext; intro p; induction p; reflexivity
end

hott definition isConnected (A : Type u) :=
Œ£ (x : A), Œ† y, ‚à•x = y‚à•

end GroundZero.Theorems.Functions
