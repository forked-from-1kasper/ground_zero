import GroundZero.HITs.Merely

open GroundZero.Types GroundZero.HITs
open GroundZero.Structures

namespace GroundZero.Theorems.Functions
universe u v

hott def injective {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
Œ† x y, f x = f y ‚Üí x = y

hott def fibInh {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
Œª b, ‚à•fib f b‚à•

hott def surj {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
fiberwise (fibInh f)

hott def Ran {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) :=
total (fibInh f)

hott def cut {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) : Œ± ‚Üí Ran f :=
Œª x, ‚ü®f x, Merely.elem ‚ü®x, Id.refl‚ü©‚ü©

hott def cutIsSurj {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) : surj (cut f) :=
begin
  intro ‚ü®x, (H : ‚à•_‚à•)‚ü©; induction H;
  case elemœÄ G => {
    apply Merely.elem; existsi G.1;
    fapply Sigma.prod; exact G.2;
    apply Merely.uniq
  };
  apply Merely.uniq
end

hott def Ran.subset {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) : Ran f ‚Üí Œ≤ :=
Sigma.fst

hott def Ran.incl {Œ± : Type u} {Œ≤ : Type v} {f : Œ± ‚Üí Œ≤} (H : surj f) : Œ≤ ‚Üí Ran f :=
Œª x, ‚ü®x, H x‚ü©

hott def surjImplRanEqv {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) (H : surj f) : Ran f ‚âÉ Œ≤ :=
begin
  existsi Sigma.fst; fapply Prod.mk <;> existsi Ran.incl H;
  { intro ‚ü®_, _‚ü©; fapply Sigma.prod; reflexivity; apply Merely.uniq };
  { intro; reflexivity }
end

hott def ranConst {Œ± : Type u} (a : Œ±) {Œ≤ : Type v} (b : Œ≤) :
  Ran (Function.const Œ± b) :=
‚ü®b, Merely.elem ‚ü®a, Id.refl‚ü©‚ü©

hott def ranConstEqv {Œ± : Type u} (a : Œ±) {Œ≤ : Type v}
  (H : hset Œ≤) (b : Œ≤) : Ran (Function.const Œ± b) ‚âÉ ùüè :=
begin
  existsi (Œª _, ‚òÖ); fapply Prod.mk <;> existsi (Œª _, ranConst a b);
  { intro ‚ü®b', (G : ‚à•_‚à•)‚ü©; fapply Sigma.prod; change b = b';
    induction G; case elemœÄ w => { exact w.2 }; apply H;
    apply Merely.uniq };
  { intro ‚òÖ; reflexivity }
end

hott def embedding (Œ± : Type u) (Œ≤ : Type v) :=
Œ£ (f : Œ± ‚Üí Œ≤), Œ† x y, @Equiv.biinv (x = y) (f x = f y) (Id.map f)

infix:55 " ‚Ü™ " => embedding

section
  variable {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Ü™ Œ≤)

  def embedding.ap : Œ± ‚Üí Œ≤ := f.1
  def embedding.eqv (x y : Œ±) : (x = y) ‚âÉ (f.ap x = f.ap y) :=
  ‚ü®Id.map f.ap, f.2 x y‚ü©
end

hott def ntypeOverEmbedding {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Ü™ Œ≤) (n : ‚Ñï‚Çã‚ÇÇ) :
  is-(hlevel.succ n)-type Œ≤ ‚Üí is-(hlevel.succ n)-type Œ± :=
begin
  intros H x y; apply ntypeRespectsEquiv; apply Equiv.symm;
  existsi Id.map f.1; apply f.2; apply H
end

hott def eqvMapForward {Œ± : Type u} {Œ≤ : Type v} (e : Œ± ‚âÉ Œ≤)
  (x y : Œ±) (p : e x = e y) : x = y :=
(e.leftForward x)‚Åª¬π ‚¨ù (@Id.map Œ≤ Œ± _ _ e.left p) ‚¨ù (e.leftForward y)

hott def sigmaPropEq {Œ± : Type u} {Œ≤ : Œ± ‚Üí Type v}
  (H : Œ† x, prop (Œ≤ x)) {x y : Sigma Œ≤} (p : x.1 = y.1) : x = y :=
begin fapply Sigma.prod; exact p; apply H end

hott def propSigmaEquiv {Œ± : Type u} {Œ≤ : Œ± ‚Üí Type v} (H : Œ† x, prop (Œ≤ x))
  (x y : Œ£ x, Œ≤ x) : (x = y) ‚âÉ (x.1 = y.1) :=
begin
  apply Equiv.trans; apply Sigma.sigmaPath;
  apply Equiv.trans; apply Sigma.respectsEquiv;
  { intro; apply contrEquivUnit; fapply Sigma.mk;
    apply H; intro; apply propIsSet; apply H };
  apply Equiv.trans; apply Sigma.const; apply unitProdEquiv
end

hott def propSigmaEmbedding {Œ± : Type u} {Œ≤ : Œ± ‚Üí Type v}
  (H : Œ† x, prop (Œ≤ x)) : (Œ£ x, Œ≤ x) ‚Ü™ Œ± :=
begin
  existsi Sigma.fst; intro x y;
  apply Equiv.transport Equiv.biinv _ (propSigmaEquiv H x y).2;
  apply Theorems.funext; intro p; induction p; reflexivity
end

hott def isConnected (Œ± : Type u) :=
Œ£ (x : Œ±), Œ† y, ‚à•x = y‚à•

end GroundZero.Theorems.Functions