import GroundZero.Structures
open GroundZero.Types.Equiv
open GroundZero.Structures
open GroundZero.Types.Id
open GroundZero.Types

/-
  See Appendix A in ‚ÄúOn the homotopy groups of spheres in homotopy type theory‚Äù, Guillaume Brunerie.
  https://arxiv.org/abs/1606.05916

  Directed version is given in the ‚ÄúA Type-Theoretical Definition of Weak œâ-Categories‚Äù, Eric Finster, Samuel Mimram.
  * https://arxiv.org/abs/1706.02866
  * https://github.com/ericfinster/catt.io
  * https://github.com/ericfinster/catt
  * https://github.com/smimram/catt
  * https://github.com/thibautbenjamin/catt
-/

universe u v

def Array.push‚ÇÇ {A : Type u} (Œ± : Array A) (x y : A) := (Œ±.push x).push y
def Array.tail  {A : Type u} (Œ± : Array A) := Œ±.extract 1 Œ±.size

namespace GroundZero

hott definition Con.bundle (A : Type u) : ‚Ñï ‚Üí Œ£ (X : Type (u + 1)), X ‚Üí Type (u + 1)
| Nat.zero   => ‚ü®ùüè, Œª _, ùüè‚ü©
| Nat.succ n => ‚ü®Œ£ (w : (bundle A n).1), (bundle A n).2 w ‚Üí Type‚Åé u,
                 Œª T, Œ£ (Œî : (bundle A n).2 T.1) (y : (T.2 Œî).1), (T.2 Œî).2 = y‚ü©

/-- Type of *contractible contexts* used to define the coherence operations. -/
hott definition Con (A : Type u) (n : ‚Ñï) :=
(Con.bundle A n).1

/-- Reflection of contractible context into our type theory. -/
hott definition Con.ref {A : Type u} {n : ‚Ñï} (Œì : Con A n) :=
(Con.bundle A n).2 Œì

macro:max atomic("«Ä" noWs) Œì:term noWs "«Ä" : term => `(Con.ref $Œì)

-- Reflection of a contractible context is truly contractible.
hott lemma Con.contr (A : Type u) : Œ† (n : ‚Ñï) (Œì : Con A n), contr «ÄŒì«Ä
| Nat.zero,   _ => unitIsContr
| Nat.succ n, Œì => contrRespectsSigma (Con.contr A n Œì.1) (Œª _, singl.contr _)

hott definition idcon (A : Type u) {n : ‚Ñï} {Œì : Con A n} : «ÄŒì«Ä :=
(Con.contr A n Œì).1

section
  variable {A : Type u}

  hott definition Con.nil : Con A 0      := ‚òÖ
  hott definition Ref.nil : «Ä@Con.nil A«Ä := ‚òÖ

  variable {n : ‚Ñï} {Œì : Con A n}

  hott definition Con.cons (T : «ÄŒì«Ä ‚Üí Type u) (u : Œ† Œî, T Œî) : Con A (n + 1) :=
  ‚ü®Œì, Œª Œî, ‚ü®T Œî, u Œî‚ü©‚ü©

  variable {T : «ÄŒì«Ä ‚Üí Type u} {u : Œ† Œî, T Œî}
  hott definition Ref.cons (Œî : «ÄŒì«Ä) (x : T Œî) (p : u Œî = x) : «ÄCon.cons T u«Ä :=
  ‚ü®Œî, ‚ü®x, p‚ü©‚ü©
end

section
  variable {A : Type u} {n : ‚Ñï} (Œµ : A ‚Üí Con A n) (C : Œ† (a : A), «ÄŒµ a«Ä ‚Üí Type v) (c : Œ† (a : A), C a (idcon A))

  hott definition Coh : Œ† a Œî, C a Œî :=
  Œª a Œî, transport (C a) ((Con.contr A n (Œµ a)).2 Œî) (c a)

  hott lemma cohŒ≤ (a : A) : Coh Œµ C c a (idcon A) = c a :=
  begin
    transitivity; apply ap (transport _ ¬∑ _); show _ = idp _;
    apply propIsSet; apply contrImplProp; apply Con.contr; reflexivity
  end
end

section
  open Lean Lean.Elab

  abbrev natLit := mkLit ‚àò Literal.natVal
  abbrev sigfst := mkProj ``Sigma 0
  abbrev sigsnd := mkProj ``Sigma 1

  elab tag:"coh " œÉs:many1(bracketedBinder) ", " œÉ:term : term => do {
    Term.elabBinders œÉs fun con => do {
      let C    ‚Üê Term.elabType œÉ;
      let lctx ‚Üê MonadLCtx.getLCtx;

      let mut tele := con.toList;
      let fv       := tele.head!;
      let fvdecl   := lctx.getFVar! fv
      let A        := fvdecl.type;

      let some l‚ÇÅ := (‚Üê Meta.inferType A).sortLevel!.dec | throwErrorAt (œÉs.get! 0) "expected to be a Type";
      let some l‚ÇÇ := (‚Üê Meta.inferType C).sortLevel!.dec | throwErrorAt œÉ "expected to be a Type";

      let ref     := mkApp (mkConst ``Con.ref  [l‚ÇÅ]) A;
      let conCons := mkApp (mkConst ``Con.cons [l‚ÇÅ]) A;
      let refCons := mkApp (mkConst ``Ref.cons [l‚ÇÅ]) A;

      let mut Œî := mkApp (mkConst ``Con.nil [l‚ÇÅ]) A;
      let mut Œ¥ := mkApp (mkConst ``Ref.nil [l‚ÇÅ]) A;

      let mut k := 0;

      let mut fvs : Array Expr := #[];
      let mut evs : Array Expr := #[];

      tele := tele.tail!;

      while !tele.isEmpty do {
        if tele.length < 2 then throwErrorAt œÉs.back
          "contractible context expected to be in the form ‚Äú... (b : A) (p : u = b)‚Äù";

        let b‚ÇÅ := tele.head!;
        let b‚ÇÇ := tele.tail!.head!;
        let T  := (lctx.getFVar! b‚ÇÅ).type;
        let U  := (lctx.getFVar! b‚ÇÇ).type;

        unless (U.isAppOfArity ``GroundZero.Types.Id 3)
          do throwErrorAt (œÉs.get! (2 * k + 2))
            "expected to be a path type";

        let #[_, u, y] := U.getAppArgs | unreachable!;
        unless (‚Üê Meta.isDefEq y b‚ÇÅ)
          do throwErrorAt (œÉs.get! (2 * k + 2))
            "expected to be in the form ‚Äú... = {‚Üê Meta.ppExpr b‚ÇÅ}‚Äù";

        let œÅ' := mkApp2 ref (natLit k) Œî;
        let Œî' := mkLambda `Œî BinderInfo.default œÅ' (Expr.replaceFVars T fvs evs);
        let u' := mkLambda `Œî BinderInfo.default œÅ' (Expr.replaceFVars u fvs evs);

        Œ¥ := mkApp7 refCons (natLit k) Œî Œî' u' Œ¥ b‚ÇÅ b‚ÇÇ;
        Œî := mkApp4 conCons (natLit k) Œî Œî' u';

        k := k + 1;

        evs := evs.map (¬∑.instantiate #[sigfst (mkBVar 0)]);

        fvs := fvs.push‚ÇÇ b‚ÇÅ b‚ÇÇ;
        evs := evs.push‚ÇÇ (sigfst (sigsnd (mkBVar 0))) (sigsnd (sigsnd (mkBVar 0)));

        tele := tele.tail!.tail!;
      }

      Meta.withNewBinderInfos #[(fvdecl.fvarId, BinderInfo.default)] do {
        let œÅ := mkApp2 ref (natLit k) Œî;
        let C := (‚Üê instantiateMVars C).replaceFVars fvs evs;

        let idcon := mkApp3 (mkConst ``idcon [l‚ÇÅ]) A (natLit k) Œî;
        let apcoh := (‚Üê Meta.mkLambdaFVars #[fv] (mkLambda `Œî BinderInfo.default œÅ C))
                     |> mkApp4 (mkConst ``Coh [l‚ÇÅ, l‚ÇÇ]) A (natLit k)
                               (‚Üê Meta.mkLambdaFVars #[fv] Œî);

        let idc ‚Üê Meta.mkForallFVars #[fv] (mkLet `Œî œÅ idcon C);
        return (‚Üê mkApp3 apcoh (mkBVar (2 * k + 2)) (mkBVar (2 * k + 1)) Œ¥
               |> Meta.mkLambdaFVars con.tail)
               |>.replaceFVar fv (mkBVar 0)
               |> mkLambda fvdecl.userName fvdecl.binderInfo fvdecl.type
               |> mkLambda `Œµ BinderInfo.default idc
      };
    }
  }
end

namespace Example
  hott definition rev {A : Type u} {a b : A} (p : a = b) : b = a :=
  (coh (a : A) (b : A) (p : a = b), b = a) idp a b p

  hott definition com {A : Type u} {a b c : A} (p : a = b) (q : b = c) : a = c :=
  (coh (a : A) (b : A) (p : a = b) (c : A) (q : b = c), a = c) idp a b p c q

  hott definition invol {A : Type u} {a b : A} (p : a = b) : p = rev (rev p) :=
  (coh {a : A} {b : A} (p : a = b), p = rev (rev p)) (Œª x, idp (idp x)) p

  -- p‚Åª¬π is defined directly in terms of J rule
  hott remark revRev {A : Type u} {a b : A} (p : a = b) : rev p = p‚Åª¬π :=
  (coh {a : A} {b : A} (p : a = b), rev p = p‚Åª¬π) (Œª x, idp (idp x)) p

  hott definition lu {A : Type u} {a b : A} (p : a = b) : com (idp a) p = p :=
  (coh {a : A} {b : A} (p : a = b), com (idp a) p = p) (Œª x, idp (idp x)) p

  hott definition ru {A : Type u} {a b : A} (p : a = b) : com p (idp b) = p :=
  (coh {a : A} {b : A} (p : a = b), com p (idp b) = p) (Œª x, idp (idp x)) p

  hott definition assoc {A : Type u} {a b c d : A} (p : a = b) (q : b = c) (r : c = d) : p ‚¨ù (q ‚¨ù r) = (p ‚¨ù q) ‚¨ù r :=
  (coh {a : A} {b : A} (p : a = b) {c : A} (q : b = c) {d : A} (r : c = d), p ‚¨ù (q ‚¨ù r) = (p ‚¨ù q) ‚¨ù r) (Œª x, idp (idp x)) p q r

  variable (A : Type u) (a : A)
  #success assoc (idp a) (idp a) (idp a) ‚â° idp (idp a)
end Example

end GroundZero
