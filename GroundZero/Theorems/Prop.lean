import GroundZero.HITs.Interval
import GroundZero.Theorems.UA
import GroundZero.HITs.Merely

open GroundZero.HITs.Interval
open GroundZero.Proto (idfun)
open GroundZero.Types.Equiv
open GroundZero.Structures
open GroundZero.Types

namespace GroundZero
namespace Theorems.Prop

universe u v w

hott def uniqDoesNotAddNewPaths {Œ± : Type u} (a b : ‚à•Œ±‚à•)
  (p : a = b) : HITs.Merely.uniq a b = p :=
propIsSet HITs.Merely.uniq _ _ _ _

hott def propEquiv {œÄ : Type u} (H : prop œÄ) : œÄ ‚âÉ ‚à•œÄ‚à• :=
propEquivLemma H HITs.Merely.uniq HITs.Merely.elem (HITs.Merely.rec H id)

hott def propFromEquiv {œÄ : Type u} : œÄ ‚âÉ ‚à•œÄ‚à• ‚Üí prop œÄ :=
begin
  intro ‚ü®f, (‚ü®g, Œ±‚ü©, _)‚ü© a b; transitivity;
  exact (Œ± a)‚Åª¬π; symmetry; transitivity; exact (Œ± b)‚Åª¬π;
  apply Id.map g; exact HITs.Merely.uniq (f b) (f a)
end

hott def mapToHapply {Œ± : Type u} {Œ≤ : Type v}
  (c : Œ±) (f g : Œ± ‚Üí Œ≤) (p : f = g) :
  Id.map (Œª (f : Œ± ‚Üí Œ≤), f c) p = happly p c :=
begin induction p; reflexivity end

hott def hmtpyRewrite {Œ± : Type u} (f : Œ± ‚Üí Œ±) (H : f ~ id) (x : Œ±) : H (f x) = Id.map f (H x) :=
begin have p := (Theorems.funext H)‚Åª¬π; induction p; apply Id.symm; apply Equiv.idmap end

hott def qinvImplsIshae {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) : Qinv f ‚Üí Ishae f :=
begin
  intro ‚ü®g, ‚ü®Œµ, Œ∑‚ü©‚ü©; let Œµ' := Œª b, (Œµ (f (g b)))‚Åª¬π ‚¨ù (Id.map f (Œ∑ (g b)) ‚¨ù Œµ b);
  existsi g; existsi Œ∑; existsi Œµ'; intro x; symmetry; transitivity;
  { apply Id.map (Œª p, _ ‚¨ù (Id.map f p ‚¨ù _)); apply hmtpyRewrite (g ‚àò f) };
  apply rewriteComp; transitivity; apply Id.map (¬∑ ‚¨ù _); symmetry; apply mapOverComp (g ‚àò f);
  symmetry; apply @homotopySquare Œ± Œ≤ (f ‚àò g ‚àò f) f (Œª x, Œµ (f x)) (g (f x)) x (Œ∑ x)
end

hott def respectsEquivOverFst {Œ± : Type u} {Œ≤ : Type v}
  (œÜ : Œ± ‚âÉ Œ≤) (C : Œ± ‚Üí Type w) : (Œ£ x, C x) ‚âÉ (Œ£ x, C (œÜ.left x)) :=
begin
  fapply Sigma.replaceIshae; apply qinvImplsIshae; existsi œÜ.1;
  apply Prod.mk; apply œÜ.leftForward; apply œÜ.forwardFeft
end

hott def fibEq {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) {y : Œ≤} {a b : Œ±}
  (p : f a = y) (q : f b = y) : (Œ£ (Œ≥ : a = b), Id.map f Œ≥ ‚¨ù q = p) ‚Üí @Id (fib f y) ‚ü®a, p‚ü© ‚ü®b, q‚ü© :=
begin
  intro ‚ü®Œ≥, r‚ü©; fapply Sigma.prod; exact Œ≥; transitivity; apply transportOverContrMap;
  transitivity; apply Id.map (¬∑ ‚¨ù p); apply Id.mapInv; apply rewriteComp; exact r‚Åª¬π
end

hott def ishaeImplContrFib {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Üí Œ≤) : Ishae f ‚Üí Œ† y, contr (fib f y) :=
begin
  intro ‚ü®g, Œ∑, Œµ, œÑ‚ü© y; existsi ‚ü®g y, Œµ y‚ü©; intro ‚ü®x, p‚ü©; apply fibEq;
  existsi (Id.map g p)‚Åª¬π ‚¨ù Œ∑ x; transitivity;
  apply Id.map (¬∑ ‚¨ù p); apply mapFunctoriality;
  transitivity; apply Id.map (_ ‚¨ù ¬∑ ‚¨ù p); apply œÑ;
  transitivity; symmetry; apply Id.assoc; transitivity;
  { apply Id.map (¬∑ ‚¨ù _); transitivity; apply Id.mapInv;
    apply Id.map; symmetry; apply mapOverComp };
  apply rewriteComp; transitivity; apply Id.map (_ ‚¨ù ¬∑);
  symmetry; apply idmap; apply homotopySquare
end


hott def compQinv‚ÇÅ {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}
  (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ±) (H : isQinv f g) :
  @Qinv (Œ≥ ‚Üí Œ±) (Œ≥ ‚Üí Œ≤) (f ‚àò ¬∑) :=
begin
  existsi (g ‚àò ¬∑); apply Prod.mk <;> intro <;>
  apply Theorems.funext <;> intro; apply H.1; apply H.2
end

hott def compQinv‚ÇÇ {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}
  (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ±) (H : isQinv f g) :
  @Qinv (Œ≤ ‚Üí Œ≥) (Œ± ‚Üí Œ≥) (¬∑ ‚àò f) :=
begin
  existsi (¬∑ ‚àò g) <;> apply Prod.mk <;> intro G <;>
  apply Theorems.funext <;> intro <;>
  apply Id.map G; apply H.2; apply H.1
end

hott def linvContr {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Üí Œ≤) (H : Qinv f) : contr (linv f) :=
begin
  apply contrRespectsEquiv;
  { apply Equiv.symm; apply Sigma.respectsEquiv;
    intro g; symmetry; apply @Theorems.full Œ± (Œª _, Œ±) (g ‚àò f) };
  apply ishaeImplContrFib; apply qinvImplsIshae;
  fapply compQinv‚ÇÇ; exact H.1; exact H.2
end

hott def rinvContr {Œ± : Type u} {Œ≤ : Type v}
  (f : Œ± ‚Üí Œ≤) (H : Qinv f) : contr (rinv f) :=
begin
  apply contrRespectsEquiv;
  { apply Equiv.symm; apply Sigma.respectsEquiv;
    intro g; symmetry; apply @Theorems.full Œ≤ (Œª _, Œ≤) (f ‚àò g) };
  apply ishaeImplContrFib; apply qinvImplsIshae;
  fapply compQinv‚ÇÅ; exact H.1; exact H.2
end

hott def productContr {Œ± : Type u} {Œ≤ : Type v} (h : contr Œ±) (g : contr Œ≤) : contr (Œ± √ó Œ≤) :=
begin existsi (h.1, g.1); intro p; fapply Product.prod; apply h.2; apply g.2 end

hott def biinvProp {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) : prop (biinv f) :=
begin
  apply lemContr; intro g; apply productContr;
  { apply linvContr; apply Qinv.ofBiinv; assumption };
  { apply rinvContr; apply Qinv.ofBiinv; assumption }
end

hott def equivHmtpyLem {Œ± : Type u} {Œ≤ : Type v}
  (f g : Œ± ‚âÉ Œ≤) (H : f.forward ~ g.forward) : f = g :=
begin fapply Sigma.prod; apply Theorems.funext; exact H; apply biinvProp end

hott def propEquivProp {Œ± Œ≤ : Type u} (G : prop Œ≤) : prop (Œ± ‚âÉ Œ≤) :=
begin intros f g; apply equivHmtpyLem; intro x; apply G end

hott def propExercise (œÄ : Type u) : prop œÄ ‚âÉ (œÄ ‚âÉ ‚à•œÄ‚à•) :=
begin
  existsi @propEquiv œÄ; apply Prod.mk <;> existsi propFromEquiv;
  { intro x; apply propIsProp };
  { intro f; apply equivHmtpyLem;
    intro x; apply HITs.Merely.uniq }
end

hott def lemContrInv {Œ± : Type u} (h : prop Œ±) (x : Œ±) : contr Œ± := ‚ü®x, h x‚ü©

hott def lemContrEquiv {Œ± : Type u} : (prop Œ±) ‚âÉ (Œ± ‚Üí contr Œ±) :=
begin
  apply propEquivLemma; apply propIsProp; apply functionToContr;
  apply lemContrInv; apply lemContr
end

hott def contrToType {Œ± : Type u} {Œ≤ : Œ± ‚Üí Type v}
  (H : contr Œ±) : (Œ£ x, Œ≤ x) ‚Üí Œ≤ H.1 :=
Œª w, subst (H.2 w.1)‚Åª¬π w.2

hott def typeToContr {Œ± : Type u} {Œ≤ : Œ± ‚Üí Type v}
  (H : contr Œ±) : Œ≤ H.1 ‚Üí (Œ£ x, Œ≤ x) :=
Œª u, ‚ü®H.1, u‚ü©

-- HoTT 3.20
hott def contrFamily {Œ± : Type u} {Œ≤ : Œ± ‚Üí Type v} (H : contr Œ±) : (Œ£ x, Œ≤ x) ‚âÉ Œ≤ H.1 :=
begin
  existsi contrToType H; apply Prod.mk <;>
  existsi @typeToContr Œ± Œ≤ H <;> intro x;
  { fapply Sigma.prod; apply H.2; apply transportBackAndForward };
  { transitivity; apply Id.map (subst ¬∑ x);
    apply propIsSet (contrImplProp H) _ _ _ (idp _);
    reflexivity }
end

hott def propset.Id (Œ± Œ≤ : ‚Ñ¶) (H : Œ±.1 = Œ≤.1) : Œ± = Œ≤ :=
Sigma.prod H (propIsProp _ _)

noncomputable hott def propEqProp {Œ± Œ≤ : Type u} (G : prop Œ≤) : prop (Œ± = Œ≤) :=
begin apply propRespectsEquiv; apply GroundZero.ua.univalence Œ± Œ≤; apply propEquivProp G end

noncomputable hott def propsetIsSet : hset propset :=
begin
  intro ‚ü®x, H‚ü© ‚ü®y, G‚ü©; apply transport (Œª œÄ, Œ† (p q : œÄ), p = q);
  symmetry; apply GroundZero.ua; apply Sigma.sigmaPath;
  intro ‚ü®p, p'‚ü© ‚ü®q, q'‚ü©; fapply Sigma.prod;
  { apply propEqProp; exact G };
  { apply propIsSet; apply propIsProp }
end

hott def hsetEquiv {Œ± : Type u} {Œ≤ : Type v} (g : hset Œ≤) : hset (Œ± ‚âÉ Œ≤) :=
begin
  fapply hsetRespectsSigma;
  { apply piHset; intro x; assumption };
  { intro x; apply propIsSet; apply biinvProp }
end

hott def bool.decode : ùüê ‚âÉ ùüê ‚Üí ùüê :=
Œª e, e false

hott def bool.encode : ùüê ‚Üí ùüê ‚âÉ ùüê
| false => ideqv ùüê
| true  => ua.negBoolEquiv

hott def eqvInj {Œ± : Type u} {Œ≤ : Type v} (e : Œ± ‚âÉ Œ≤) (x y : Œ±)
  (p : e.forward x = e.forward y) : x = y :=
begin
  transitivity; symmetry; apply e.leftForward;
  transitivity; apply Id.map e.left; exact p;
  apply e.leftForward
end

hott def zeroEquiv.hset (Œ± Œ≤ : 0-Type) : hset (Œ± ‚âÉ‚ÇÄ Œ≤) :=
begin apply hsetEquiv; apply zeroEqvSet.forward; exact Œ≤.2 end

hott def boolEquivEqvBool : (ùüê ‚âÉ ùüê) ‚âÉ ùüê :=
begin
  existsi bool.decode; fapply Qinv.toBiinv; existsi bool.encode; apply Prod.mk;
  { intro x; induction x using Bool.casesOn <;> reflexivity };
  { intro ‚ü®œÜ, H‚ü©; apply equivHmtpyLem; intro x;
    match boolEqTotal (œÜ false), boolEqTotal (œÜ true) with
    | Sum.inl p‚ÇÅ, Sum.inl q‚ÇÅ => _
    | Sum.inr p‚ÇÇ, Sum.inl q‚ÇÅ => _
    | Sum.inl p‚ÇÅ, Sum.inr q‚ÇÇ => _
    | Sum.inr p‚ÇÇ, Sum.inr q‚ÇÇ => _;
    -- TODO: apply ‚Äúor‚Äù here somehow
    { apply Proto.Empty.elim; apply ffNeqTt;
      apply eqvInj ‚ü®œÜ, H‚ü©; exact p‚ÇÅ ‚¨ù q‚ÇÅ‚Åª¬π };
    { apply Id.trans; apply Id.map (bool.encode ¬∑ x); apply p‚ÇÇ;
      symmetry; induction x using Bool.casesOn <;> assumption };
    { apply Id.trans; apply Id.map (bool.encode ¬∑ x); apply p‚ÇÅ;
      symmetry; induction x using Bool.casesOn <;> assumption };
    { apply Proto.Empty.elim; apply ffNeqTt;
      apply eqvInj ‚ü®œÜ, H‚ü©; exact p‚ÇÇ ‚¨ù q‚ÇÇ‚Åª¬π } }
end

hott def contrQinvFib {Œ± : Type u} {Œ≤ : Type v} (w : Qinv.eqv Œ± Œ≤) (b : Œ≤) : contr (Œ£ a, b = w.1 a) :=
begin apply contrRespectsEquiv; apply respectsEquivOverFst (Qinv.toEquiv (Qinv.inv w)) (Id b); apply singl.contr end

hott def propQinvFib {Œ± : Type u} {Œ≤ : Type v} (w : Qinv.eqv Œ± Œ≤) (b : Œ≤) : prop (Œ£ a, b = w.1 a) :=
contrImplProp (contrQinvFib w b)

hott def corrRev {Œ± : Type u} {Œ≤ : Type v} : Corr Œ± Œ≤ ‚Üí Corr Œ≤ Œ± :=
Œª w, ‚ü®Œª a b, w.1 b a, (w.2.2, w.2.1)‚ü©

hott def corrOfQinv {Œ± : Type u} {Œ≤ : Type v} : Qinv.eqv Œ± Œ≤ ‚Üí Corr Œ± Œ≤ :=
begin
  intro w; existsi (Œª a b, b = w.1 a); apply Prod.mk <;> intros;
  apply contrRespectsEquiv; apply Sigma.hmtpyInvEqv; apply singl.contr;
  apply contrQinvFib
end

hott def qinvOfCorr {Œ± : Type u} {Œ≤ : Type v} : Corr Œ± Œ≤ ‚Üí Qinv.eqv Œ± Œ≤ :=
begin
  intro w; fapply Sigma.mk; intro a; apply (w.2.1 a).1.1;
  fapply Sigma.mk; intro b; apply (w.2.2 b).1.1; apply Prod.mk;
  { intro b; apply Id.map Sigma.fst ((w.2.1 (w.2.2 b).1.1).2 ‚ü®b, (w.2.2 b).1.2‚ü©) };
  { intro a; apply Id.map Sigma.fst ((w.2.2 (w.2.1 a).1.1).2 ‚ü®a, (w.2.1 a).1.2‚ü©) }
end

section
  variable {Œ± : Type u} {Œ≤ : Type v} (e : Qinv.eqv Œ± Œ≤)

  example : (qinvOfCorr (corrOfQinv e)).1 = e.1     := by reflexivity
  example : (qinvOfCorr (corrOfQinv e)).2.1 = e.2.1 := by reflexivity
end

section
  variable {Œ± : Type u} {Œ≤ : Type v}

  hott def corrOfBiinv : Œ± ‚âÉ Œ≤ ‚Üí Corr Œ± Œ≤ :=
  Œª e, @corrOfQinv Œ± Œ≤ ‚ü®e.1, Qinv.ofBiinv e.1 e.2‚ü©

  hott def biinvOfCorr : Corr Œ± Œ≤ ‚Üí Œ± ‚âÉ Œ≤ :=
  Qinv.toEquiv ‚àò qinvOfCorr

  hott def corrLem (R : Œ± ‚Üí Œ≤ ‚Üí Type w) (œÜ : Œ± ‚Üí Œ≤) (œÅ : Œ† x, R x (œÜ x))
    (H : Œ† x y, R x y ‚Üí œÜ x = y) (c : Œ† (x : Œ±) (y : Œ≤) (w : R x y), œÅ x =[H x y w] w)
    (x : Œ±) (y : Œ≤) : (œÜ x = y) ‚âÉ (R x y) :=
  begin
    fapply Sigma.mk; { intro p; apply transport (R x) p; apply œÅ }; fapply Qinv.toBiinv;
    fapply Sigma.mk; intro r; exact (H x (œÜ x) (œÅ x))‚Åª¬π ‚¨ù H x y r; apply Prod.mk;
    { intro r; dsimp; transitivity; apply Id.map; symmetry; apply c x (œÜ x) (œÅ x);
      transitivity; apply substComp; transitivity; apply Id.map (subst (H x y r));
      apply transportForwardAndBack; apply c };
    { intro p; induction p; apply Id.invComp }
  end

  noncomputable hott def corrBiinvIdfun : corrOfBiinv ‚àò @biinvOfCorr Œ± Œ≤ ~ idfun :=
  begin
    intro w; fapply Sigma.prod;
    apply Theorems.funext; intro x; apply Theorems.funext; intro y;
    change (y = (w.2.1 x).1.1) = (w.1 x y); apply ua; apply Equiv.trans;
    apply inveqv; fapply corrLem w.1 (Œª x, (w.2.1 x).1.1) (Œª x, (w.2.1 x).1.2)
      (Œª x y œÅ, Id.map Sigma.fst ((w.2.1 x).2 ‚ü®y, œÅ‚ü©));
    { intros x y œÅ; change _ = _; transitivity; symmetry;
      apply transportComp (w.1 x) Sigma.fst ((w.2.1 x).2 ‚ü®y, œÅ‚ü©);
      apply apd Sigma.snd };
    apply productProp <;> { apply piProp; intros; apply contrIsProp }
  end

  hott def biinvCorrIdfun : biinvOfCorr ‚àò @corrOfBiinv Œ± Œ≤ ~ idfun :=
  begin intro e; fapply equivHmtpyLem; intro; reflexivity end

  noncomputable hott def biinvEquivCorr : Corr Œ± Œ≤ ‚âÉ (Œ± ‚âÉ Œ≤) :=
  begin
    existsi biinvOfCorr; fapply Qinv.toBiinv; existsi corrOfBiinv;
    apply Prod.mk; apply biinvCorrIdfun; apply corrBiinvIdfun
  end
end

end Theorems.Prop
end GroundZero