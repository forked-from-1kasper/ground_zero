import GroundZero.HITs.Interval
import GroundZero.Theorems.UA
import GroundZero.HITs.Merely

open GroundZero.HITs.Interval
open GroundZero.Proto (idfun)
open GroundZero.Types.Equiv
open GroundZero.Structures
open GroundZero.Types

namespace GroundZero
namespace Theorems.Equiv

universe u v w w' w''

hott def uniqDoesNotAddNewPaths {A : Type u} (a b : ‚à•A‚à•)
  (p : a = b) : HITs.Merely.uniq a b = p :=
propIsSet HITs.Merely.uniq _ _ _ _

hott def propEquiv {A : Type u} (H : prop A) : A ‚âÉ ‚à•A‚à• :=
propEquivLemma H HITs.Merely.uniq HITs.Merely.elem (HITs.Merely.rec H id)

hott def propFromEquiv {A : Type u} : A ‚âÉ ‚à•A‚à• ‚Üí prop A :=
begin
  intro ‚ü®f, (‚ü®g, A‚ü©, _)‚ü© a b; transitivity;
  exact (A a)‚Åª¬π; symmetry; transitivity; exact (A b)‚Åª¬π;
  apply Id.map g; exact HITs.Merely.uniq (f b) (f a)
end

hott def mapToHapply {A : Type u} {B : A ‚Üí Type v}
  (c : A) (f g : Œ† x, B x) (p : f = g) :
  Id.map (Œª (f : Œ† x, B x), f c) p = happly p c :=
begin induction p; reflexivity end

hott def mapToHapply‚ÇÇ {A : Type u} {B : A ‚Üí Type v} {C : Œ† x, B x ‚Üí Type w}
  (c‚ÇÅ : A) (c‚ÇÇ : B c‚ÇÅ) (f g : Œ† (x : A) (y : B x), C x y) (p : f = g) :
  Id.map (Œª f, f c‚ÇÅ c‚ÇÇ) p = happly (happly p c‚ÇÅ) c‚ÇÇ :=
begin induction p; reflexivity end

hott def mapToHapply‚ÇÉ {A : Type u} {B : A ‚Üí Type v} {C : Œ† x, B x ‚Üí Type w}
  {D : Œ† x y, C x y ‚Üí Type w'} (c‚ÇÅ : A) (c‚ÇÇ : B c‚ÇÅ) (c‚ÇÉ : C c‚ÇÅ c‚ÇÇ) (f g : Œ† x y z, D x y z) (p : f = g) :
  Id.map (Œª f, f c‚ÇÅ c‚ÇÇ c‚ÇÉ) p = happly (happly (happly p c‚ÇÅ) c‚ÇÇ) c‚ÇÉ :=
begin induction p; reflexivity end

hott def mapToHapply‚ÇÑ {A : Type u} {B : A ‚Üí Type v} {C : Œ† x, B x ‚Üí Type w}
  {D : Œ† (x : A) (y : B x), C x y ‚Üí Type w'} {E : Œ† (x : A) (y : B x) (z : C x y), D x y z ‚Üí Type w''}
  (c‚ÇÅ : A) (c‚ÇÇ : B c‚ÇÅ) (c‚ÇÉ : C c‚ÇÅ c‚ÇÇ) (c‚ÇÑ : D c‚ÇÅ c‚ÇÇ c‚ÇÉ) (f g : Œ† x y z w, E x y z w) (p : f = g) :
  Id.map (Œª f, f c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ) p = happly (happly (happly (happly p c‚ÇÅ) c‚ÇÇ) c‚ÇÉ) c‚ÇÑ :=
begin induction p; reflexivity end

hott def happlyFunextPt {A : Type u} {B : A ‚Üí Type v} {f g : Œ† x, B x} (H : f ~ g) (x : A) : happly (funext H) x = H x :=
begin apply happly; apply happlyFunext end

hott def happlyFunextPt‚ÇÇ {A : Type u} {B : A ‚Üí Type v} {C : Œ† x, B x ‚Üí Type w}
  {f g : Œ† x y, C x y} (H : Œ† x y, f x y = g x y) (c‚ÇÅ : A) (c‚ÇÇ : B c‚ÇÅ) :
  happly (happly (funext (Œª x, funext (H x))) c‚ÇÅ) c‚ÇÇ = H c‚ÇÅ c‚ÇÇ :=
begin transitivity; apply Id.map (happly ¬∑ c‚ÇÇ); apply happlyFunextPt; apply happlyFunextPt end

hott def happlyFunextPt‚ÇÉ {A : Type u} {B : A ‚Üí Type v} {C : Œ† x, B x ‚Üí Type w}
  {D : Œ† x y, C x y ‚Üí Type w'} {f g : Œ† x y z, D x y z}
  (H : Œ† x y z, f x y z = g x y z) (c‚ÇÅ : A) (c‚ÇÇ : B c‚ÇÅ) (c‚ÇÉ : C c‚ÇÅ c‚ÇÇ) :
  happly (happly (happly (funext (Œª x, funext (Œª y, funext (H x y)))) c‚ÇÅ) c‚ÇÇ) c‚ÇÉ = H c‚ÇÅ c‚ÇÇ c‚ÇÉ :=
begin transitivity; apply Id.map (happly ¬∑ c‚ÇÉ); apply happlyFunextPt‚ÇÇ; apply happlyFunextPt end

hott def happlyFunextPt‚ÇÑ {A : Type u} {B : A ‚Üí Type v} {C : Œ† x, B x ‚Üí Type w}
  {D : Œ† x y, C x y ‚Üí Type w'} {E : Œ† x y z, D x y z ‚Üí Type w''} {f g : Œ† x y z w, E x y z w}
  (H : Œ† x y z w, f x y z w = g x y z w) (c‚ÇÅ : A) (c‚ÇÇ : B c‚ÇÅ) (c‚ÇÉ : C c‚ÇÅ c‚ÇÇ) (c‚ÇÑ : D c‚ÇÅ c‚ÇÇ c‚ÇÉ) :
  happly (happly (happly (happly (funext (Œª x, funext (Œª y, funext (Œª z, funext (H x y z))))) c‚ÇÅ) c‚ÇÇ) c‚ÇÉ) c‚ÇÑ = H c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ :=
begin transitivity; apply Id.map (happly ¬∑ c‚ÇÑ); apply happlyFunextPt‚ÇÉ; apply happlyFunextPt end

hott def happlyRevPt {A : Type u} {B : A ‚Üí Type v} {f g : Œ† x, B x} (p : f = g) (x : A) :
  happly p‚Åª¬π x = Homotopy.symm f g (happly p) x :=
begin apply happly; apply HITs.Interval.happlyRev end

hott def hmtpyRewrite {A : Type u} (f : A ‚Üí A) (H : f ~ id) (x : A) : H (f x) = Id.map f (H x) :=
begin have p := (Theorems.funext H)‚Åª¬π; induction p; symmetry; apply Equiv.idmap end

hott def qinvImplsIshae {A : Type u} {B : Type v} (f : A ‚Üí B) : qinv f ‚Üí ishae f :=
begin
  intro ‚ü®g, ‚ü®Œµ, Œ∑‚ü©‚ü©; let Œµ' := Œª b, (Œµ (f (g b)))‚Åª¬π ‚¨ù (Id.map f (Œ∑ (g b)) ‚¨ù Œµ b);
  existsi g; existsi Œ∑; existsi Œµ'; intro x; symmetry; transitivity;
  { apply Id.map (Œª p, _ ‚¨ù (Id.map f p ‚¨ù _)); apply hmtpyRewrite (g ‚àò f) };
  apply rewriteComp; transitivity; apply Id.map (¬∑ ‚¨ù _); symmetry; apply mapOverComp (g ‚àò f);
  symmetry; apply @homotopySquare A B (f ‚àò g ‚àò f) f (Œª x, Œµ (f x)) (g (f x)) x (Œ∑ x)
end

hott def respectsEquivOverFst {A : Type u} {B : Type v}
  (œÜ : A ‚âÉ B) (C : A ‚Üí Type w) : (Œ£ x, C x) ‚âÉ (Œ£ x, C (œÜ.left x)) :=
begin
  fapply Sigma.replaceIshae; apply qinvImplsIshae; existsi œÜ.1;
  apply Prod.mk; apply œÜ.leftForward; apply œÜ.forwardLeft
end

hott def fibEq {A : Type u} {B : Type v} (f : A ‚Üí B) {y : B} {a b : A}
  (p : f a = y) (q : f b = y) : (Œ£ (Œ≥ : a = b), Id.map f Œ≥ ‚¨ù q = p) ‚Üí @Id (fib f y) ‚ü®a, p‚ü© ‚ü®b, q‚ü© :=
begin
  intro ‚ü®Œ≥, r‚ü©; fapply Sigma.prod; exact Œ≥; transitivity; apply transportOverContrMap;
  transitivity; apply Id.map (¬∑ ‚¨ù p); apply Id.mapInv; apply rewriteComp; exact r‚Åª¬π
end

hott def ishaeImplContrFib {A : Type u} {B : Type v}
  (f : A ‚Üí B) : ishae f ‚Üí Œ† y, contr (fib f y) :=
begin
  intro ‚ü®g, Œ∑, Œµ, œÑ‚ü© y; existsi ‚ü®g y, Œµ y‚ü©; intro ‚ü®x, p‚ü©; apply fibEq;
  existsi (Id.map g p)‚Åª¬π ‚¨ù Œ∑ x; transitivity;
  apply Id.map (¬∑ ‚¨ù p); apply mapFunctoriality;
  transitivity; apply Id.map (_ ‚¨ù ¬∑ ‚¨ù p); apply œÑ;
  transitivity; symmetry; apply Id.assoc; transitivity;
  { apply Id.map (¬∑ ‚¨ù _); transitivity; apply Id.mapInv;
    apply Id.map; symmetry; apply mapOverComp };
  apply rewriteComp; transitivity; apply Id.map (_ ‚¨ù ¬∑);
  symmetry; apply idmap; apply homotopySquare
end

hott def compQinv‚ÇÅ {A : Type u} {B : Type v} {C : Type w}
  (f : A ‚Üí B) (g : B ‚Üí A) (H : isQinv f g) :
  @qinv (C ‚Üí A) (C ‚Üí B) (f ‚àò ¬∑) :=
begin
  existsi (g ‚àò ¬∑); apply Prod.mk <;> intro <;>
  apply Theorems.funext <;> intro; apply H.1; apply H.2
end

hott def compQinv‚ÇÇ {A : Type u} {B : Type v} {C : Type w}
  (f : A ‚Üí B) (g : B ‚Üí A) (H : isQinv f g) :
  @qinv (B ‚Üí C) (A ‚Üí C) (¬∑ ‚àò f) :=
begin
  existsi (¬∑ ‚àò g) <;> apply Prod.mk <;> intro G <;>
  apply Theorems.funext <;> intro <;>
  apply Id.map G; apply H.2; apply H.1
end

hott def linvContr {A : Type u} {B : Type v}
  (f : A ‚Üí B) (H : qinv f) : contr (linv f) :=
begin
  apply contrRespectsEquiv;
  { apply Equiv.symm; apply Sigma.respectsEquiv;
    intro g; symmetry; apply @Theorems.full A (Œª _, A) (g ‚àò f) };
  apply ishaeImplContrFib; apply qinvImplsIshae;
  fapply compQinv‚ÇÇ; exact H.1; exact H.2
end

hott def rinvContr {A : Type u} {B : Type v}
  (f : A ‚Üí B) (H : qinv f) : contr (rinv f) :=
begin
  apply contrRespectsEquiv;
  { apply Equiv.symm; apply Sigma.respectsEquiv;
    intro g; symmetry; apply @Theorems.full B (Œª _, B) (f ‚àò g) };
  apply ishaeImplContrFib; apply qinvImplsIshae;
  fapply compQinv‚ÇÅ; exact H.1; exact H.2
end

hott def productContr {A : Type u} {B : Type v} (h : contr A) (g : contr B) : contr (A √ó B) :=
begin existsi (h.1, g.1); intro p; fapply Product.prod; apply h.2; apply g.2 end

hott def biinvProp {A : Type u} {B : Type v} (f : A ‚Üí B) : prop (biinv f) :=
begin
  apply lemContr; intro g; apply productContr;
  { apply linvContr; apply Qinv.ofBiinv; assumption };
  { apply rinvContr; apply Qinv.ofBiinv; assumption }
end

hott def equivHmtpyLem {A : Type u} {B : Type v}
  (f g : A ‚âÉ B) (H : f.forward ~ g.forward) : f = g :=
begin fapply Sigma.prod; apply Theorems.funext; exact H; apply biinvProp end

hott def propEquivProp {A B : Type u} (G : prop B) : prop (A ‚âÉ B) :=
begin intros f g; apply equivHmtpyLem; intro x; apply G end

hott def propExercise (œÄ : Type u) : prop œÄ ‚âÉ (œÄ ‚âÉ ‚à•œÄ‚à•) :=
begin
  existsi @propEquiv œÄ; apply Prod.mk <;> existsi propFromEquiv;
  { intro x; apply propIsProp };
  { intro f; apply equivHmtpyLem;
    intro x; apply HITs.Merely.uniq }
end

hott def lemContrInv {A : Type u} (h : prop A) (x : A) : contr A := ‚ü®x, h x‚ü©

hott def lemContrEquiv {A : Type u} : (prop A) ‚âÉ (A ‚Üí contr A) :=
begin
  apply propEquivLemma; apply propIsProp; apply functionToContr;
  apply lemContrInv; apply lemContr
end

hott def contrToType {A : Type u} {B : A ‚Üí Type v}
  (H : contr A) : (Œ£ x, B x) ‚Üí B H.1 :=
Œª w, subst (H.2 w.1)‚Åª¬π w.2

hott def typeToContr {A : Type u} {B : A ‚Üí Type v}
  (H : contr A) : B H.1 ‚Üí (Œ£ x, B x) :=
Œª u, ‚ü®H.1, u‚ü©

-- HoTT 3.20
hott def contrFamily {A : Type u} {B : A ‚Üí Type v} (H : contr A) : (Œ£ x, B x) ‚âÉ B H.1 :=
begin
  existsi contrToType H; apply Prod.mk <;>
  existsi @typeToContr A B H <;> intro x;
  { fapply Sigma.prod; apply H.2; apply transportBackAndForward };
  { transitivity; apply Id.map (subst ¬∑ x);
    apply propIsSet (contrImplProp H) _ _ _ (idp _);
    reflexivity }
end

hott def propset.Id (A B : Prop) (H : A.1 = B.1) : A = B :=
Sigma.prod H (propIsProp _ _)

noncomputable hott def propEqProp {A B : Type u} (G : prop B) : prop (A = B) :=
begin apply propRespectsEquiv; apply GroundZero.ua.univalence A B; apply propEquivProp G end

noncomputable hott def propsetIsSet : hset propset :=
begin
  intro ‚ü®x, H‚ü© ‚ü®y, G‚ü©; apply transport (Œª œÄ, Œ† (p q : œÄ), p = q);
  symmetry; apply GroundZero.ua; apply Sigma.sigmaPath;
  intro ‚ü®p, p'‚ü© ‚ü®q, q'‚ü©; fapply Sigma.prod;
  { apply propEqProp; exact G };
  { apply propIsSet; apply propIsProp }
end

hott def hsetEquiv {A : Type u} {B : Type v} (g : hset B) : hset (A ‚âÉ B) :=
begin
  fapply hsetRespectsSigma;
  { apply piHset; intro x; assumption };
  { intro x; apply propIsSet; apply biinvProp }
end

hott def bool.decode : ùüê ‚âÉ ùüê ‚Üí ùüê :=
Œª e, e false

hott def bool.encode : ùüê ‚Üí ùüê ‚âÉ ùüê
| false => ideqv ùüê
| true  => ua.negBoolEquiv

hott def zeroEquiv.hset (A B : 0-Type) : hset (A ‚âÉ‚ÇÄ B) :=
begin apply hsetEquiv; apply zeroEqvSet.forward; exact B.2 end

hott def boolEquivEqvBool : (ùüê ‚âÉ ùüê) ‚âÉ ùüê :=
begin
  existsi bool.decode; fapply Qinv.toBiinv; existsi bool.encode; apply Prod.mk;
  { intro x; induction x using Bool.casesOn <;> reflexivity };
  { intro ‚ü®œÜ, H‚ü©; apply equivHmtpyLem; intro x;
    match boolEqTotal (œÜ false), boolEqTotal (œÜ true) with
    | Sum.inl p‚ÇÅ, Sum.inl q‚ÇÅ => _
    | Sum.inr p‚ÇÇ, Sum.inl q‚ÇÅ => _
    | Sum.inl p‚ÇÅ, Sum.inr q‚ÇÇ => _
    | Sum.inr p‚ÇÇ, Sum.inr q‚ÇÇ => _;
    -- TODO: apply ‚Äúor‚Äù here somehow
    { apply Proto.Empty.elim; apply ffNeqTt;
      apply eqvInj ‚ü®œÜ, H‚ü©; exact p‚ÇÅ ‚¨ù q‚ÇÅ‚Åª¬π };
    { transitivity; apply Id.map (bool.encode ¬∑ x); apply p‚ÇÇ;
      symmetry; induction x using Bool.casesOn <;> assumption };
    { transitivity; apply Id.map (bool.encode ¬∑ x); apply p‚ÇÅ;
      symmetry; induction x using Bool.casesOn <;> assumption };
    { apply Proto.Empty.elim; apply ffNeqTt;
      apply eqvInj ‚ü®œÜ, H‚ü©; exact p‚ÇÇ ‚¨ù q‚ÇÇ‚Åª¬π } }
end

hott def contrQinvFib {A : Type u} {B : Type v} {f : A ‚Üí B} (e : qinv f) (b : B) : contr (Œ£ a, b = f a) :=
begin apply contrRespectsEquiv; apply respectsEquivOverFst (Qinv.toEquiv (Qinv.sym e)) (Id b); apply singl.contr end

hott def propQinvFib {A : Type u} {B : Type v} {f : A ‚Üí B} (e : qinv f) (b : B) : prop (Œ£ a, b = f a) :=
contrImplProp (contrQinvFib e b)

hott def corrRev {A : Type u} {B : Type v} : Corr A B ‚Üí Corr B A :=
Œª w, ‚ü®Œª a b, w.1 b a, (w.2.2, w.2.1)‚ü©

hott def corrOfQinv {A : Type u} {B : Type v} : (Œ£ f, @qinv A B f) ‚Üí Corr A B :=
begin
  intro w; existsi (Œª a b, b = w.1 a); apply Prod.mk <;> intros;
  apply contrRespectsEquiv; apply Sigma.hmtpyInvEqv; apply singl.contr;
  apply contrQinvFib; exact w.2
end

hott def qinvOfCorr {A : Type u} {B : Type v} : Corr A B ‚Üí (Œ£ f, @qinv A B f) :=
begin
  intro w; fapply Sigma.mk; intro a; apply (w.2.1 a).1.1;
  fapply Sigma.mk; intro b; apply (w.2.2 b).1.1; apply Prod.mk;
  { intro b; apply Id.map Sigma.fst ((w.2.1 (w.2.2 b).1.1).2 ‚ü®b, (w.2.2 b).1.2‚ü©) };
  { intro a; apply Id.map Sigma.fst ((w.2.2 (w.2.1 a).1.1).2 ‚ü®a, (w.2.1 a).1.2‚ü©) }
end

section
  variable {A : Type u} {B : Type v} (e : Œ£ f, @qinv A B f)

  example : (qinvOfCorr (corrOfQinv e)).1 = e.1     := by reflexivity
  example : (qinvOfCorr (corrOfQinv e)).2.1 = e.2.1 := by reflexivity
end

section
  variable {A : Type u} {B : Type v}

  hott def corrOfBiinv : A ‚âÉ B ‚Üí Corr A B :=
  Œª e, @corrOfQinv A B ‚ü®e.1, Qinv.ofBiinv e.1 e.2‚ü©

  hott def biinvOfCorr : Corr A B ‚Üí A ‚âÉ B :=
  Œª c, Qinv.toEquiv (qinvOfCorr c).2

  hott def corrLem (R : A ‚Üí B ‚Üí Type w) (œÜ : A ‚Üí B) (œÅ : Œ† x, R x (œÜ x))
    (H : Œ† x y, R x y ‚Üí œÜ x = y) (c : Œ† (x : A) (y : B) (w : R x y), œÅ x =[H x y w] w)
    (x : A) (y : B) : (œÜ x = y) ‚âÉ (R x y) :=
  begin
    fapply Sigma.mk; { intro p; apply transport (R x) p; apply œÅ }; fapply Qinv.toBiinv;
    fapply Sigma.mk; intro r; exact (H x (œÜ x) (œÅ x))‚Åª¬π ‚¨ù H x y r; apply Prod.mk;
    { intro r; dsimp; transitivity; apply Id.map; symmetry; apply c x (œÜ x) (œÅ x);
      transitivity; apply substComp; transitivity; apply Id.map (subst (H x y r));
      apply transportForwardAndBack; apply c };
    { intro p; induction p; apply Id.invComp }
  end

  noncomputable hott def corrBiinvIdfun : corrOfBiinv ‚àò @biinvOfCorr A B ~ idfun :=
  begin
    intro w; fapply Sigma.prod;
    apply Theorems.funext; intro x; apply Theorems.funext; intro y;
    change (y = (w.2.1 x).1.1) = (w.1 x y); apply ua; apply Equiv.trans;
    apply inveqv; fapply corrLem w.1 (Œª x, (w.2.1 x).1.1) (Œª x, (w.2.1 x).1.2)
      (Œª x y œÅ, Id.map Sigma.fst ((w.2.1 x).2 ‚ü®y, œÅ‚ü©));
    { intros x y œÅ; change _ = _; transitivity; symmetry;
      apply transportComp (w.1 x) Sigma.fst ((w.2.1 x).2 ‚ü®y, œÅ‚ü©);
      apply apd Sigma.snd };
    apply productProp <;> { apply piProp; intros; apply contrIsProp }
  end

  hott def biinvCorrIdfun : biinvOfCorr ‚àò @corrOfBiinv A B ~ idfun :=
  begin intro e; fapply equivHmtpyLem; intro; reflexivity end

  noncomputable hott def biinvEquivCorr : Corr A B ‚âÉ (A ‚âÉ B) :=
  begin
    existsi biinvOfCorr; fapply Qinv.toBiinv; existsi corrOfBiinv;
    apply Prod.mk; apply biinvCorrIdfun; apply corrBiinvIdfun
  end
end

hott def pathOver {A : Type u} (B : A ‚Üí Type v) {a b : A} (p : a = b) (u : B a) (v : B b) :=
Œ£ (œÜ : Œ† x y, x = y ‚Üí B x ‚Üí B y), œÜ a b p u = v √ó Œ† x, œÜ x x (idp x) ~ idfun

hott def pathOverCharacterization {A : Type u} {B : A ‚Üí Type v} {a b : A}
  (p : a = b) (u : B a) (v : B b) : (u =[p] v) ‚âÉ pathOver B p u v :=
begin
  fapply Sigma.mk; { intro q; existsi @transport A B; apply Prod.mk; exact q; intro; apply idp };
  apply Qinv.toBiinv; fapply Sigma.mk; { intro œâ; induction p; apply (œâ.2.2 a u)‚Åª¬π ‚¨ù œâ.2.1 };
  apply Prod.mk;
  { induction p; intro œâ; fapply Sigma.prod;
    { apply Theorems.funext; intro x;
      apply Theorems.funext; intro y;
      apply Theorems.funext; intro Œ∑;
      induction Œ∑; apply Theorems.funext (Œª w, (œâ.2.2 x w)‚Åª¬π) };
    transitivity; apply transportOverProduct; apply Product.prod;
    transitivity; apply transportOverContrMap;
    { transitivity; apply Id.map (¬∑ ‚¨ù _);
      transitivity; apply Id.mapInv; apply Id.map Id.inv;
      transitivity; apply mapToHapply‚ÇÑ;
      transitivity; apply Id.map (happly ¬∑ _);
      apply happlyFunextPt‚ÇÉ; apply happlyFunextPt; apply Id.invCompCancel };
    { transitivity; apply transportOverPi; apply Theorems.funext; intro;
      transitivity; apply transportOverPi; apply Theorems.funext; intro;
      transitivity; apply transportOverContrMap;
      transitivity; apply Id.reflRight;
      transitivity; apply Id.mapInv;
      transitivity; apply Id.map Id.inv;
      transitivity; apply mapToHapply‚ÇÑ;
      transitivity; apply Id.map (happly ¬∑ _);
      apply happlyFunextPt‚ÇÉ; apply happlyFunextPt; apply Id.invInv } };
  { induction p; reflexivity }
end

hott def replaceIshaeUnderPi {A : Type u} {B : Type v} {C : A ‚Üí Type w}
  (g : B ‚Üí A) (e : ishae g) : (Œ† x, C x) ‚âÉ (Œ† x, C (g x)) :=
begin
  fapply Sigma.mk; intro œÜ x; exact œÜ (g x); fapply Qinv.toBiinv;
  fapply Sigma.mk; intro œà y; exact transport C (e.2.2.1 y) (œà (e.1 y)); apply Prod.mk;
  { intro œà; apply Theorems.funext; intro;
    transitivity; apply Equiv.transportSquare; symmetry; apply e.2.2.2;
    transitivity; symmetry; apply Equiv.transportComp; apply apd };
  { intro œÜ; apply Theorems.funext; intro; apply apd }
end

hott def replaceQinvUnderPi {A : Type u} {B : Type v} {C : A ‚Üí Type w}
  (g : B ‚Üí A) : qinv g ‚Üí (Œ† x, C x) ‚âÉ (Œ† x, C (g x)) :=
replaceIshaeUnderPi g ‚àò qinvImplsIshae g

end Theorems.Equiv
end GroundZero