import GroundZero.Structures
open GroundZero.Structures GroundZero.Types
open GroundZero.Theorems (funext)
open GroundZero.Types.Equiv

namespace GroundZero
universe u v w

namespace HITs
namespace Interval
  @[hottAxiom] def segInv : i‚ÇÅ = i‚ÇÄ := Support.inclusion (Quot.sound (I.rel.mk true false))

  /- Œ≤ i‚ÇÄ and Œ≤ i‚ÇÅ are Prop‚Äôs, so s : b‚ÇÄ = b‚ÇÅ is trivial -/
  def propRec {Œ≤ : I ‚Üí Prop} (b‚ÇÄ : Œ≤ i‚ÇÄ) (b‚ÇÅ : Œ≤ i‚ÇÅ) : Œ† x, Œ≤ x :=
  begin
    intro x; refine Quot.ind ?_ x; intro b;
    induction b using Bool.casesOn; exact b‚ÇÄ; exact b‚ÇÅ
  end

  def hrec (Œ≤ : I ‚Üí Type u) (b‚ÇÄ : Œ≤ 0) (b‚ÇÅ : Œ≤ 1) (s : HEq b‚ÇÄ b‚ÇÅ) (x : I) : Œ≤ x :=
  begin
    fapply Quot.hrecOn x;
    { intro b; induction b using Bool.casesOn; exact b‚ÇÄ; exact b‚ÇÅ };
    { intros a b R; induction a using Bool.casesOn <;> induction b using Bool.casesOn;
      { apply HEq.refl }; { exact s }; { exact HEq.symm s }; { apply HEq.refl } }
  end

  hott def lift {Œ≤ : Type u} (œÜ : ùüê ‚Üí Œ≤) (H : prop Œ≤) : I ‚Üí Œ≤ :=
  rec (œÜ false) (œÜ true) (H _ _)

  hott def contrLeft : Œ† i, i‚ÇÄ = i :=
  Interval.ind (idp i‚ÇÄ) seg (begin apply pathoverFromTrans; apply Id.reflLeft end)

  hott def contrRight : Œ† i, i‚ÇÅ = i :=
  Interval.ind seg‚Åª¬π (idp i‚ÇÅ) (begin apply pathoverFromTrans; apply Id.invComp end)

  hott def intervalContr : contr I := ‚ü®i‚ÇÅ, contrRight‚ü©

  hott def intervalProp : prop I :=
  contrImplProp intervalContr

  hott def transportOverHmtpy {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}
    (f : Œ± ‚Üí Œ≤) (g‚ÇÅ g‚ÇÇ : Œ≤ ‚Üí Œ≥) (h : Œ± ‚Üí Œ≥) (p : g‚ÇÅ = g‚ÇÇ) (H : g‚ÇÅ ‚àò f ~ h) (x : Œ±) :
       transport (Œª (g : Œ≤ ‚Üí Œ≥), g ‚àò f ~ h) p H x
    = @transport (Œ≤ ‚Üí Œ≥) (Œª (g : Œ≤ ‚Üí Œ≥), g (f x) = h x) g‚ÇÅ g‚ÇÇ p (H x) :=
  happly (transportOverPi _ _ _) x

  hott def boolToInterval (œÜ : ùüê ‚Üí ùüê ‚Üí ùüê) (a b : I) : I :=
  lift (Œª x, lift (discrete ‚àò œÜ x) intervalProp b) intervalProp a

  hott def neg : I ‚Üí I := rec i‚ÇÅ i‚ÇÄ seg‚Åª¬π
  instance : Neg I := ‚ü®neg‚ü©

  hott def min (a b : I) : I :=
  lift (Œª | false => i‚ÇÄ | true => a) intervalProp b

  hott def max (a b : I) : I :=
  lift (Œª | false => a | true => i‚ÇÅ) intervalProp b

  infix:70 " ‚àß " => min
  infix:70 " ‚à® " => max

  hott def elim {Œ± : Type u} {a b : Œ±} (p : a = b) : I ‚Üí Œ± := rec a b p
  hott def lam  {Œ± : Type u} (f : I ‚Üí Œ±) : f 0 = f 1 := Id.map f seg

  hott def connAnd {Œ± : Type u} {a b : Œ±}
    (p : a = b) : Œ† i, a = elim p i :=
  Œª i, lam (Œª j, elim p (i ‚àß j))

  hott def cong {Œ± : Type u} {Œ≤ : Type v} {a b : Œ±}
    (f : Œ± ‚Üí Œ≤) (p : a = b) : f a = f b :=
  lam (Œª i, f (elim p i))

  noncomputable hott def congRefl {Œ± : Type u} {Œ≤ : Type v}
    {a : Œ±} (f : Œ± ‚Üí Œ≤) : cong f (idp a) = idp (f a) :=
  begin
    transitivity; apply mapOverComp;
    transitivity; apply Id.map;
    apply recŒ≤rule; reflexivity
  end

  noncomputable hott def mapEqCong {Œ± : Type u} {Œ≤ : Type v} {a b : Œ±}
    (f : Œ± ‚Üí Œ≤) (p : a = b) : Id.map f p = cong f p :=
  begin induction p; symmetry; apply congRefl end

  noncomputable hott def negNeg : Œ† x, neg (neg x) = x :=
  ind (idp i‚ÇÄ) (idp i‚ÇÅ) (calc
    transport (Œª x, neg (neg x) = x) seg (idp i‚ÇÄ) =
    (@Id.map I I i‚ÇÅ i‚ÇÄ (neg ‚àò neg) seg‚Åª¬π) ‚¨ù idp i‚ÇÄ ‚¨ù seg :
      by apply transportOverInvolution
    ... = Id.map neg (Id.map neg seg‚Åª¬π) ‚¨ù idp i‚ÇÄ ‚¨ù seg :
      begin apply Id.map (Œª p, p ‚¨ù idp i‚ÇÄ ‚¨ù seg);
            apply mapOverComp end
    ... = Id.map neg (Id.map neg seg)‚Åª¬π ‚¨ù idp i‚ÇÄ ‚¨ù seg :
      begin apply Id.map (Œª p, p ‚¨ù idp i‚ÇÄ ‚¨ù seg);
            apply Id.map; apply Id.mapInv end
    ... = Id.map neg seg‚Åª¬π‚Åª¬π ‚¨ù idp i‚ÇÄ ‚¨ù seg :
      begin apply Id.map (Œª p, p ‚¨ù idp i‚ÇÄ ‚¨ù seg);
            apply Id.map; apply Id.map Types.Id.symm;
            apply recŒ≤rule end
    ... = Id.map neg seg ‚¨ù idp i‚ÇÄ ‚¨ù seg :
      begin apply Id.map (Œª (p : i‚ÇÄ = i‚ÇÅ), Id.map neg p ‚¨ù idp i‚ÇÄ ‚¨ù seg);
            apply Id.invInv end
    ... = seg‚Åª¬π ‚¨ù idp i‚ÇÄ ‚¨ù seg :
      begin apply Id.map (¬∑ ‚¨ù idp i‚ÇÄ ‚¨ù seg);
            apply recŒ≤rule end
    ... = seg‚Åª¬π ‚¨ù seg :
      begin apply Id.map (¬∑ ‚¨ù seg);
            apply Id.reflRight end
    ... = idp i‚ÇÅ : by apply Id.invComp)

  hott def negNeg' (x : I) : neg (neg x) = x :=
  (connAnd seg‚Åª¬π (neg x))‚Åª¬π ‚¨ù contrRight x

  noncomputable hott def twist : I ‚âÉ I :=
  ‚ü®neg, ‚ü®‚ü®neg, negNeg'‚ü©, ‚ü®neg, negNeg'‚ü©‚ü©‚ü©

  noncomputable hott def lineRec {Œ± : Type u} (p : I ‚Üí Œ±) :
    rec (p 0) (p 1) (Id.map p seg) = p :=
  begin
    apply Theorems.funext; intro x; induction x;
    reflexivity; reflexivity; change _ = _;
    transitivity; apply Equiv.transportOverHmtpy;
    transitivity; apply Id.map (¬∑ ‚¨ù Id.map p seg);
    transitivity; apply Id.reflRight;
    transitivity; apply Id.mapInv; apply Id.map;
    apply recŒ≤rule; apply Id.invComp
  end

  noncomputable hott def transportOverSeg {Œ± : Type u}
    (œÄ : Œ± ‚Üí Type v) {a b : Œ±} (p : a = b) (u : œÄ a) :
    @transport I (Œª i, œÄ (elim p i)) 0 1 Interval.seg u = subst p u :=
  begin
    transitivity; apply transportComp;
    transitivity; apply Id.map (subst ¬∑ u);
    apply recŒ≤rule; reflexivity
  end

  noncomputable hott def transportconstWithSeg {Œ± Œ≤ : Type u} (p : Œ± = Œ≤) (x : Œ±) :
    @transport I (elim p) 0 1 seg x = transportconst p x :=
  by apply transportOverSeg id
end Interval

end HITs
end GroundZero