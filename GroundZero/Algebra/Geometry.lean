import GroundZero.Algebra.Basic

open GroundZero.Structures (prop propset contr)
open GroundZero.Types GroundZero.Proto
open GroundZero.HITs
open GroundZero.Types

namespace GroundZero.Algebra
  universe u v

  hott def Pregeometry : Type (max u v + 1) :=
  @Alg.{0, 0, u, v} ùüé ùüê (Coproduct.elim Empty.elim (Bool.rec 3 4))

  namespace Pregeometry
    def between (G : Pregeometry) (a b c : G.carrier) :=
    (G.rel false (a, b, c, ‚òÖ)).1

    def congruent (G : Pregeometry) (a b c d : G.carrier) :=
    (G.rel true (a, b, c, d, ‚òÖ)).1

    def prop‚ÇÅ (G : Pregeometry) {a b c : G.carrier} : prop (G.between a b c) :=
    (G.rel false (a, b, c, ‚òÖ)).2

    def prop‚ÇÇ (G : Pregeometry) {a b c d : G.carrier} : prop (G.congruent a b c d) :=
    (G.rel true (a, b, c, d, ‚òÖ)).2

    hott def collinear (G : Pregeometry) (a b c : G.carrier) :=
    ‚à•G.between a b c + G.between c a b + G.between b c a‚à•

    class geometry (G : Pregeometry) :=
    (refl  : Œ† a b, G.congruent a b b a)
    (trans : Œ† a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ a‚ÇÉ b‚ÇÉ, G.congruent a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ ‚Üí G.congruent a‚ÇÅ b‚ÇÅ a‚ÇÉ b‚ÇÉ ‚Üí G.congruent a‚ÇÇ b‚ÇÇ a‚ÇÉ b‚ÇÉ)
    (idp‚ÇÅ  : Œ† a b c, G.congruent a b c c ‚Üí a = b)
    (idp‚ÇÇ  : Œ† a b, G.between a b a ‚Üí a = b)
    (pasch : Œ† a b c u v, G.between a u c ‚Üí G.between b v c ‚Üí ‚à•Œ£ x, G.between u x b √ó G.between v x a‚à•)

    class nonlinear (G : Pregeometry) :=
    (lower : ‚à•Œ£ a b c, (¬¨G.between a b c) √ó (¬¨G.between b c a) √ó (¬¨G.between c a b)‚à•)

    class planar (G : Pregeometry) :=
    (upper : Œ† a b c u v, G.congruent a u a v ‚Üí G.congruent b u b v ‚Üí G.congruent c u c v ‚Üí ¬¨(u = v) ‚Üí G.collinear a b c)

    class planimetry (G : Pregeometry) extends geometry G, nonlinear G, planar G

    class isotropic (G : Pregeometry) :=
    (construct : Œ† a b x y, ‚à•Œ£ z, G.between x y z √ó G.congruent y z a b‚à•)

    class continuous (G : Pregeometry) :=
    (cut (œÜ œà : G.carrier ‚Üí ‚Ñ¶) :
      ‚à•Œ£ a, Œ† x y, (œÜ x).1 ‚Üí (œà y).1 ‚Üí G.between a x y‚à• ‚Üí
      ‚à•Œ£ b, Œ† x y, (œÜ x).1 ‚Üí (œà y).1 ‚Üí G.between x b y‚à•)

    class absolute (G : Pregeometry) extends geometry G, isotropic G :=
    (five : Œ† x‚ÇÅ y‚ÇÅ z‚ÇÅ u‚ÇÅ x‚ÇÇ y‚ÇÇ z‚ÇÇ u‚ÇÇ, ¬¨(x‚ÇÅ = y‚ÇÅ) ‚Üí G.between x‚ÇÅ y‚ÇÅ z‚ÇÅ ‚Üí G.between x‚ÇÇ y‚ÇÇ z‚ÇÇ ‚Üí
      G.congruent x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ ‚Üí G.congruent y‚ÇÅ z‚ÇÅ y‚ÇÇ z‚ÇÇ ‚Üí
      G.congruent x‚ÇÅ u‚ÇÅ x‚ÇÇ u‚ÇÇ ‚Üí G.congruent y‚ÇÅ u‚ÇÅ y‚ÇÇ u‚ÇÇ ‚Üí
      G.congruent z‚ÇÅ u‚ÇÅ z‚ÇÇ u‚ÇÇ)

    hott def segment (G : Pregeometry) (a b : G.carrier) : Ens G.carrier :=
    ‚ü®Œª c, G.between a c b, Œª _, G.prop‚ÇÅ‚ü©

    hott def geodesic (G : Pregeometry) (a b : G.carrier) : Ens G.carrier :=
    ‚ü®G.collinear a b, Œª _, Merely.uniq‚ü©

    hott def circle (G : Pregeometry) (a b : G.carrier) : Ens G.carrier :=
    ‚ü®Œª c, G.congruent a b a c, Œª _, G.prop‚ÇÇ‚ü©

    hott def triangle (G : Pregeometry) (a b c : G.carrier) : Ens G.carrier :=
    ‚ü®Œª z, ‚à•G.between a z b + G.between b z c + G.between a z c‚à•, Œª _, Merely.uniq‚ü©

    hott def ray (G : Pregeometry) (a b : G.carrier) : Ens G.carrier :=
    ‚ü®Œª c, ‚à•G.between a c b + G.between a b c‚à•, Œª _, Merely.uniq‚ü©

    class euclidean (G : Pregeometry) extends absolute G :=
    (fifth : Œ† a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ a‚ÇÉ b‚ÇÉ,
      Ens.parallel (geodesic G a‚ÇÅ b‚ÇÅ) (geodesic G a‚ÇÉ b‚ÇÉ) ‚Üí
      Ens.parallel (geodesic G a‚ÇÇ b‚ÇÇ) (geodesic G a‚ÇÉ b‚ÇÉ) ‚Üí
      Ens.parallel (geodesic G a‚ÇÅ b‚ÇÅ) (geodesic G a‚ÇÇ b‚ÇÇ))
  end Pregeometry
end GroundZero.Algebra