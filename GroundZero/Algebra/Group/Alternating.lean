import GroundZero.Algebra.Group.Factor
open GroundZero.Types.Equiv (biinv transport)
open GroundZero.Types.Id (map)
open GroundZero.Structures
open GroundZero.Types
open GroundZero.Proto
open GroundZero

/-
  Trivial group, symmetric group, cyclic group Z‚ÇÇ,
  dihedral group D‚ÇÉ, alternating group A‚ÇÉ as its subgroup.
  * https://en.wikipedia.org/wiki/Trivial_group
  * https://en.wikipedia.org/wiki/Symmetric_group
  * https://en.wikipedia.org/wiki/Cyclic_group
  * https://en.wikipedia.org/wiki/Dihedral_group_of_order_6
  * https://en.wikipedia.org/wiki/Alternating_group

  Z‚ÇÇ ‚âÖ D‚ÇÉ\A‚ÇÉ proof.
-/

namespace GroundZero.Algebra

namespace Group
  inductive D‚ÇÉ.carrier
  | R‚ÇÄ | R‚ÇÅ | R‚ÇÇ
  | S‚ÇÄ | S‚ÇÅ | S‚ÇÇ
  attribute [eliminator] D‚ÇÉ.carrier.casesOn

  open D‚ÇÉ.carrier

  hott def D‚ÇÉ.inv : D‚ÇÉ.carrier ‚Üí D‚ÇÉ.carrier
  | R‚ÇÄ => R‚ÇÄ | R‚ÇÅ => R‚ÇÇ | R‚ÇÇ => R‚ÇÅ
  | S‚ÇÄ => S‚ÇÄ | S‚ÇÅ => S‚ÇÅ | S‚ÇÇ => S‚ÇÇ

  hott def D‚ÇÉ.mul : D‚ÇÉ.carrier ‚Üí D‚ÇÉ.carrier ‚Üí D‚ÇÉ.carrier
  | R‚ÇÄ, R‚ÇÄ => R‚ÇÄ | R‚ÇÄ, R‚ÇÅ => R‚ÇÅ | R‚ÇÄ, R‚ÇÇ => R‚ÇÇ
  | R‚ÇÄ, S‚ÇÄ => S‚ÇÄ | R‚ÇÄ, S‚ÇÅ => S‚ÇÅ | R‚ÇÄ, S‚ÇÇ => S‚ÇÇ
  | R‚ÇÅ, R‚ÇÄ => R‚ÇÅ | R‚ÇÅ, R‚ÇÅ => R‚ÇÇ | R‚ÇÅ, R‚ÇÇ => R‚ÇÄ
  | R‚ÇÅ, S‚ÇÄ => S‚ÇÅ | R‚ÇÅ, S‚ÇÅ => S‚ÇÇ | R‚ÇÅ, S‚ÇÇ => S‚ÇÄ
  | R‚ÇÇ, R‚ÇÄ => R‚ÇÇ | R‚ÇÇ, R‚ÇÅ => R‚ÇÄ | R‚ÇÇ, R‚ÇÇ => R‚ÇÅ
  | R‚ÇÇ, S‚ÇÄ => S‚ÇÇ | R‚ÇÇ, S‚ÇÅ => S‚ÇÄ | R‚ÇÇ, S‚ÇÇ => S‚ÇÅ
  | S‚ÇÄ, R‚ÇÄ => S‚ÇÄ | S‚ÇÄ, R‚ÇÅ => S‚ÇÇ | S‚ÇÄ, R‚ÇÇ => S‚ÇÅ
  | S‚ÇÄ, S‚ÇÄ => R‚ÇÄ | S‚ÇÄ, S‚ÇÅ => R‚ÇÇ | S‚ÇÄ, S‚ÇÇ => R‚ÇÅ
  | S‚ÇÅ, R‚ÇÄ => S‚ÇÅ | S‚ÇÅ, R‚ÇÅ => S‚ÇÄ | S‚ÇÅ, R‚ÇÇ => S‚ÇÇ
  | S‚ÇÅ, S‚ÇÄ => R‚ÇÅ | S‚ÇÅ, S‚ÇÅ => R‚ÇÄ | S‚ÇÅ, S‚ÇÇ => R‚ÇÇ
  | S‚ÇÇ, R‚ÇÄ => S‚ÇÇ | S‚ÇÇ, R‚ÇÅ => S‚ÇÅ | S‚ÇÇ, R‚ÇÇ => S‚ÇÄ
  | S‚ÇÇ, S‚ÇÄ => R‚ÇÇ | S‚ÇÇ, S‚ÇÅ => R‚ÇÅ | S‚ÇÇ, S‚ÇÇ => R‚ÇÄ

  instance D‚ÇÉ.hasOne : OfNat D‚ÇÉ.carrier (Nat.succ Nat.zero) := ‚ü®R‚ÇÄ‚ü©
  instance D‚ÇÉ.hasMul : Mul D‚ÇÉ.carrier := ‚ü®D‚ÇÉ.mul‚ü©

  def D‚ÇÉ.elim {Œ≤ : Type u} (b‚ÇÅ b‚ÇÇ b‚ÇÉ b‚ÇÑ b‚ÇÖ b‚ÇÜ : Œ≤) (d : D‚ÇÉ.carrier) : Œ≤ :=
  @D‚ÇÉ.carrier.casesOn (Œª _, Œ≤) d b‚ÇÅ b‚ÇÇ b‚ÇÉ b‚ÇÑ b‚ÇÖ b‚ÇÜ

  hott def D‚ÇÉ : Group :=
  begin
    fapply Group.intro; exact D‚ÇÉ.carrier; apply Hedberg;
    intros x y; induction x <;> induction y <;>
    (first | apply Sum.inl; reflexivity |
      apply Sum.inr; intro H; apply ffNeqTt; symmetry; first
      | apply Id.map (D‚ÇÉ.elim true  false false false false false) H
      | apply Id.map (D‚ÇÉ.elim false true  false false false false) H
      | apply Id.map (D‚ÇÉ.elim false false true  false false false) H
      | apply Id.map (D‚ÇÉ.elim false false false true  false false) H
      | apply Id.map (D‚ÇÉ.elim false false false false false true)  H
      | apply Id.map (D‚ÇÉ.elim false false false false true  false) H);
    exact D‚ÇÉ.mul; exact D‚ÇÉ.inv; exact R‚ÇÄ;
    { intro a b c; induction a <;> induction b <;> induction c <;> reflexivity };
    repeat { intro a; induction a <;> reflexivity }
  end

  hott def A‚ÇÉ.set : D‚ÇÉ.subset :=
  ‚ü®D‚ÇÉ.elim ùüè ùüè ùüè ùüé ùüé ùüé, begin
    intro (x : D‚ÇÉ.carrier); induction x <;>
    first | apply Structures.unitIsProp
          | apply Structures.emptyIsProp
  end‚ü©

  hott def A‚ÇÉ : D‚ÇÉ.normal :=
  ‚ü®begin
    fapply Group.subgroup.mk; exact A‚ÇÉ.set; apply ‚òÖ;
    { intro (a : D‚ÇÉ.carrier) (b : D‚ÇÉ.carrier) p q;
      induction a <;> induction b <;>
      (first | induction p using Unit.casesOn
             | induction p using Proto.Empty.casesOn) <;>
      (first | induction q using Unit.casesOn
             | induction q using Proto.Empty.casesOn) <;> apply ‚òÖ };
    { intro (a : D‚ÇÉ.carrier) p <;> induction a <;>
      (first | induction p using Unit.casesOn
             | induction p using Proto.Empty.casesOn) <;> apply ‚òÖ }
  end,
  begin
    intro (g : D‚ÇÉ.carrier) (h : D‚ÇÉ.carrier) p;
    induction g <;> induction h <;>
    (first | induction p using Unit.casesOn
           | induction p using Proto.Empty.casesOn) <;> apply ‚òÖ
  end‚ü©

  def D‚ÇÉ.inj : D‚ÇÉ.carrier ‚Üí factorLeft D‚ÇÉ A‚ÇÉ := @Factor.incl D‚ÇÉ A‚ÇÉ

  hott def Z‚ÇÇ.encode : Z‚ÇÇ.carrier ‚Üí factorLeft D‚ÇÉ A‚ÇÉ
  | false => D‚ÇÉ.inj R‚ÇÄ
  | true  => D‚ÇÉ.inj S‚ÇÄ

  hott def Z‚ÇÇ.decode : factorLeft D‚ÇÉ A‚ÇÉ ‚Üí Z‚ÇÇ.carrier :=
  begin
    fapply GroundZero.HITs.Quotient.rec;
    exact D‚ÇÉ.elim false false false true true true;
    intros x y H <;> induction x <;> induction y <;>
    induction H <;> reflexivity; apply Z‚ÇÇ.set
  end

  noncomputable hott def Z‚ÇÇ.iso : Z‚ÇÇ ‚âÖ D‚ÇÉ\A‚ÇÉ :=
  begin
    fapply mkiso; exact Z‚ÇÇ.encode;
    { intros x y; induction x <;> induction y <;> reflexivity };
    apply Prod.mk <;> existsi Z‚ÇÇ.decode;
    { intro x; induction x <;> reflexivity };
    { fapply HITs.Quotient.ind;
      { intro x; induction x <;> apply HITs.Quotient.sound <;> exact ‚òÖ };
      { intros x y H; apply HITs.Quotient.set };
      { intro; apply Structures.propIsSet;
        apply HITs.Quotient.set } }
  end
end Group

end GroundZero.Algebra