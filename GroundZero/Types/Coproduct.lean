import GroundZero.Types.Equiv

namespace GroundZero.Types
universe u v w

def Coproduct (Œ± : Type u) (Œ≤ : Type v) := Sum Œ± Œ≤
infixl:65 " + " => Coproduct

attribute [eliminator] Sum.casesOn

namespace Coproduct
  variable {Œ± : Type u} {Œ≤ : Type v}

  @[matchPattern] def inl : Œ± ‚Üí Œ± + Œ≤ := Sum.inl
  @[matchPattern] def inr : Œ≤ ‚Üí Œ± + Œ≤ := Sum.inr

  hott def elim {Œ≥ : Type w} (g‚ÇÄ : Œ± ‚Üí Œ≥) (g‚ÇÅ : Œ≤ ‚Üí Œ≥) : Œ± + Œ≤ ‚Üí Œ≥
  | inl a => g‚ÇÄ a
  | inr b => g‚ÇÅ b

  hott def inv : Œ± + Œ≤ ‚Üí Œ≤ + Œ±
  | inl x => inr x
  | inr x => inl x

  hott def symm : Œ± + Œ≤ ‚âÉ Œ≤ + Œ± :=
  begin
    existsi inv; apply Qinv.toBiinv; existsi inv;
    apply Prod.mk <;> { intro x; induction x using Sum.casesOn <;> reflexivity }
  end

  namespace inl
    hott def code (a‚ÇÄ : Œ±) : Œ± + Œ≤ ‚Üí Type u
    | inl a => a‚ÇÄ = a
    | inr b => ùüé

    hott def encode {a‚ÇÄ : Œ±} {x : Œ± + Œ≤} (p : inl a‚ÇÄ = x) : code a‚ÇÄ x :=
    Equiv.transport (code a‚ÇÄ) p (idp a‚ÇÄ)

    hott def decode {a‚ÇÄ : Œ±} : Œ† {x : Œ± + Œ≤} (c : code a‚ÇÄ x), inl a‚ÇÄ = x
    | inl a, c => Id.map inl c
    | inr b, c => Proto.Empty.elim c

    hott def decodeEncode {a‚ÇÄ : Œ±} {x : Œ± + Œ≤}
      (p : inl a‚ÇÄ = x) : decode (encode p) = p :=
    begin induction p; reflexivity end

    hott def encodeDecode {a‚ÇÄ : Œ±} {x : Œ± + Œ≤} : Œ† (c : code a‚ÇÄ x), encode (decode c) = c :=
    begin
      induction x using Sum.casesOn; intro (p : a‚ÇÄ = _);
      induction p; apply idp; apply Proto.Empty.casesOn
    end

    hott def recognize (a‚ÇÄ : Œ±) (x : Œ± + Œ≤) : (inl a‚ÇÄ = x) ‚âÉ code a‚ÇÄ x :=
    begin
      existsi encode; apply Qinv.toBiinv; existsi decode;
      apply Prod.mk; apply encodeDecode; apply decodeEncode
    end

    hott def inj' (x y : Œ±) : @Id (Œ± + Œ≤) (inl x) (inl y) ‚âÉ (x = y) :=
    recognize x (inl y)

    hott def inlInr (x : Œ±) (y : Œ≤) : @Id (Œ± + Œ≤) (inl x) (inr y) ‚âÉ ùüé :=
    recognize x (inr y)
  end inl

  namespace inr
    hott def code (b‚ÇÄ : Œ≤) : Œ± + Œ≤ ‚Üí Type v
    | inl a => ùüé
    | inr b => b‚ÇÄ = b

    hott def encode {b‚ÇÄ : Œ≤} {x : Œ± + Œ≤} (p : inr b‚ÇÄ = x) : code b‚ÇÄ x :=
    Equiv.transport (code b‚ÇÄ) p (idp b‚ÇÄ)

    hott def decode {b‚ÇÄ : Œ≤} : Œ† {x : Œ± + Œ≤} (c : code b‚ÇÄ x), inr b‚ÇÄ = x
    | inl a, c => Proto.Empty.elim c
    | inr b, c => Id.map inr c

    hott def decodeEncode {b‚ÇÄ : Œ≤} {x : Œ± + Œ≤}
      (p : inr b‚ÇÄ = x) : decode (encode p) = p :=
    begin induction p; reflexivity end

    hott def encodeDecode {b‚ÇÄ : Œ≤} {x : Œ± + Œ≤} : Œ† (c : code b‚ÇÄ x), encode (decode c) = c :=
    begin
      induction x using Sum.casesOn; apply Proto.Empty.casesOn;
      intro (p : b‚ÇÄ = _); induction p; apply idp;
    end

    hott def recognize (b‚ÇÄ : Œ≤) (x : Œ± + Œ≤) : (inr b‚ÇÄ = x) ‚âÉ code b‚ÇÄ x :=
    begin
      existsi encode; apply Qinv.toBiinv; existsi decode;
      apply Prod.mk; apply encodeDecode; apply decodeEncode
    end

    hott def inj' (x y : Œ≤) : @Id (Œ± + Œ≤) (inr x) (inr y) ‚âÉ (x = y) :=
    recognize x (inr y)

    hott def inrInl (x : Œ≤) (y : Œ±) : @Id (Œ± + Œ≤) (inr x) (inl y) ‚âÉ ùüé :=
    recognize x (inl y)
  end inr

  hott def code {Œ± Œ≤ : Type u} : Œ± + Œ≤ ‚Üí Œ± + Œ≤ ‚Üí Type u
  | inl a => inl.code a
  | inr b => inr.code b

  hott def pathSum {Œ± Œ≤ : Type u} (z‚ÇÅ z‚ÇÇ : Œ± + Œ≤) (p : code z‚ÇÅ z‚ÇÇ) : z‚ÇÅ = z‚ÇÇ :=
  begin
    induction z‚ÇÅ using Sum.casesOn <;> induction z‚ÇÇ using Sum.casesOn;
    apply Id.map; assumption; apply Proto.Empty.elim p;
    apply Proto.Empty.elim p; apply Id.map; assumption
  end
end Coproduct

end GroundZero.Types