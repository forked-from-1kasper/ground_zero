import GroundZero.HITs.Colimit
import GroundZero.Structures

open GroundZero.Structures
open GroundZero.Types
open GroundZero

namespace GroundZero.Types.Nat

universe u v w

def glue : ‚Ñï ‚Üí ‚Ñï + ùüè
| Nat.zero   => Coproduct.inr ‚òÖ
| Nat.succ n => Coproduct.inl n

def peelOff : ‚Ñï + ùüè ‚Üí ‚Ñï
| Coproduct.inr _ => Nat.zero
| Coproduct.inl n => Nat.succ n

hott def closedNat : ‚Ñï ‚âÉ ‚Ñï + ùüè :=
begin
  existsi glue; apply Prod.mk <;> existsi peelOff <;> intro n;
  { induction n using Nat.casesOn <;> reflexivity };
  { induction n using Sum.casesOn <;> reflexivity }
end

hott def equivAddition {A : Type u} {B : Type v} (C : Type w) (e : A ‚âÉ B) : A + C ‚âÉ B + C :=
begin
  let f : A + C ‚Üí B + C := Œª x, match x with
  | Coproduct.inl a => Coproduct.inl (e a)
  | Coproduct.inr c => Coproduct.inr c;
  let g : B + C ‚Üí A + C := Œª x, match x with
  | Coproduct.inl b => Coproduct.inl (e.left b)
  | Coproduct.inr c => Coproduct.inr c;

  existsi f; apply Prod.mk <;> existsi g;
  { intro x; induction x using Sum.casesOn;
    apply Id.map Sum.inl; apply e.leftForward; reflexivity };
  { intro x; induction x using Sum.casesOn;
    apply Id.map Sum.inl; apply e.forwardLeft; reflexivity }
end

example : ‚Ñï ‚âÉ (‚Ñï + ùüè) + ùüè :=
begin transitivity; exact closedNat; apply equivAddition; exact closedNat end

hott def natPlusUnit : Œ† n, ‚Ñï ‚âÉ pt ‚Ñï n
| Nat.zero   => Equiv.ideqv _
| Nat.succ n => Equiv.trans closedNat (equivAddition ùüè (natPlusUnit n))

hott def liftUnit (n : ‚Ñï) : pt ùüè n ‚Üí pt ùüè (n + 1) :=
Coproduct.inl

hott def liftToTop (x : ùüè) : Œ† n, pt ùüè n
| Nat.zero   => x
| Nat.succ n => Coproduct.inl (liftToTop x n)

hott def Iterated := HITs.Colimit (pt ùüè) liftUnit

def Iterated.encode : ‚Ñï ‚Üí Iterated
| Nat.zero   => HITs.Colimit.inclusion 0 ‚òÖ
| Nat.succ n => HITs.Colimit.inclusion (n + 1) (Coproduct.inr ‚òÖ)

hott def code : ‚Ñï ‚Üí ‚Ñï ‚Üí Type
| Nat.zero,   Nat.zero   => ùüè
| Nat.succ m, Nat.zero   => ùüé
| Nat.zero,   Nat.succ n => ùüé
| Nat.succ m, Nat.succ n => code m n

hott def r : Œ† n, code n n
| Nat.zero   => ‚òÖ
| Nat.succ n => r n

hott def encode {m n : ‚Ñï} (p : m = n) : code m n :=
Equiv.subst p (r m)

hott def decode : Œ† {m n : ‚Ñï}, code m n ‚Üí m = n
| Nat.zero,   Nat.zero,   p => idp 0
| Nat.succ m, Nat.zero,   p => Proto.Empty.elim p
| Nat.zero,   Nat.succ n, p => Proto.Empty.elim p
| Nat.succ m, Nat.succ n, p => Id.map Nat.succ (decode p)

hott def decodeEncodeIdp : Œ† m, decode (encode (idp m)) = idp m
| Nat.zero   => idp _
| Nat.succ m => Id.map _ (decodeEncodeIdp m)

hott def decodeEncode {m n : ‚Ñï} (p : m = n) : decode (encode p) = p :=
begin induction p; apply decodeEncodeIdp end

hott def encodeDecode : Œ† {m n : ‚Ñï} (p : code m n), encode (decode p) = p
| Nat.zero,   Nat.zero,   ‚òÖ => idp ‚òÖ
| Nat.succ m, Nat.zero,   p => Proto.Empty.elim p
| Nat.zero,   Nat.succ n, p => Proto.Empty.elim p
| Nat.succ m, Nat.succ n, p => begin
  transitivity; symmetry;
  apply @Equiv.transportComp ‚Ñï ‚Ñï (code (m + 1)) m n
        Nat.succ (decode p) (r (m + 1));
  apply encodeDecode
end

hott def recognize (m n : ‚Ñï) : m = n ‚âÉ code m n :=
‚ü®encode, (‚ü®decode, decodeEncode‚ü©, ‚ü®decode, encodeDecode‚ü©)‚ü©

end GroundZero.Types.Nat