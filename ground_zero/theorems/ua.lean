import ground_zero.structures
open ground_zero.types.equiv (idtoeqv homotopy)
open ground_zero.types.equiv (renaming id -> ideqv)
open ground_zero.types
open ground_zero.structures ground_zero.types.not

/-
  Univalence axiom formulated using equivalence J-rule.

  ua, idtoeqv, comp_rule, prop_uniq
  * HoTT 2.10

  Full univalence: (Œ± ‚âÉ Œ≤) ‚âÉ (Œ± = Œ≤).

  Proof that Type is not a¬†set.
  * HoTT 3.1, example 3.1.9
-/

namespace ground_zero

hott theory

universes u v u' v'

axiom J {œÄ : Œ† (Œ± Œ≤ : Type u), Œ± ‚âÉ Œ≤ ‚Üí Type v}
  (h : Œ† (Œ± : Type u), œÄ Œ± Œ± (ideqv Œ±))
  {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) : œÄ Œ± Œ≤ e
axiom JŒ≤rule {œÄ : Œ† (Œ± Œ≤ : Type u), Œ± ‚âÉ Œ≤ ‚Üí Type v}
  {h : Œ† (Œ± : Type u), œÄ Œ± Œ± (ideqv Œ±)} {Œ± : Type u} :
  J h (ideqv Œ±) = h Œ± :> œÄ Œ± Œ± (ideqv Œ±)

noncomputable abbreviation Jrule
  (œÄ : Œ† (Œ± Œ≤ : Type u), Œ± ‚âÉ Œ≤ ‚Üí Type v)
  (h : Œ† (Œ± : Type u), œÄ Œ± Œ± (ideqv Œ±))
  {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) : œÄ Œ± Œ≤ e :=
J h e

noncomputable def ua {Œ± Œ≤ : Type u} : Œ± ‚âÉ Œ≤ ‚Üí Œ± = Œ≤ :=
J idp

namespace ua

@[hott] noncomputable def refl_on_ua (Œ± : Type u) :
  ua (ideqv Œ±) = idp Œ± :=
by apply JŒ≤rule

@[hott] noncomputable def comp_rule {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) :
  Œ† (x : Œ±), x =[ua e] e.fst x :=
begin
  refine J _ e, intros œà x,
  refine types.Id.rec _ (refl_on_ua œà)‚Åª¬π,
  reflexivity
end

@[hott] noncomputable def transport_rule {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) :
  Œ† (x : Œ±), types.equiv.subst (ua e) x = e.fst x :=
begin
  refine J _ e, intros œà x,
  refine types.Id.rec _ (refl_on_ua œà)‚Åª¬π,
  reflexivity
end

@[hott] noncomputable def transportconst_rule {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) :
  Œ† (x : Œ±), equiv.transportconst (ua e) x = e.fst x :=
begin
  fapply ground_zero.J _ e, intros Œ± x,
  transitivity, apply Id.map (Œª p, equiv.transportconst p x),
  apply refl_on_ua, reflexivity
end

@[hott] noncomputable def transportconst_inv_rule {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) :
  Œ† (x : Œ≤), equiv.transportconst_inv (ua e) x = e.left x :=
begin
  fapply ground_zero.J _ e, intros Œ± x,
  transitivity, apply Id.map (Œª p, equiv.transportconst_inv p x),
  apply refl_on_ua, reflexivity
end

@[hott] noncomputable def transport_inv_rule {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) :
  Œ† (x : Œ≤), types.equiv.subst_inv (ua e) x = e.left x :=
begin
  refine J _ e, intros œà x,
  refine types.Id.rec _ (refl_on_ua œà)‚Åª¬π,
  reflexivity
end

@[hott] def idtoeqv_and_id {Œ± : Type u} :
  idtoeqv (idp Œ±) = ideqv Œ± :=
by trivial

@[hott] noncomputable def uaŒ≤rule {Œ± Œ≤ : Type u} (e : Œ± ‚âÉ Œ≤) :
  idtoeqv (ua e) = e := begin
  refine J _ e, intro Œ¥, change _ = idtoeqv (idp Œ¥),
  apply Id.map idtoeqv, apply JŒ≤rule
end

@[hott] noncomputable def prop_uniq {Œ± Œ≤ : Type u} (p : Œ± = Œ≤) :
  ua (idtoeqv p) = p :=
begin induction p, exact JŒ≤rule end

@[hott] noncomputable def univalence (Œ± Œ≤ : Type u) :
  (Œ± ‚âÉ Œ≤) ‚âÉ (Œ± = Œ≤) :=
‚ü®ua, (‚ü®idtoeqv, uaŒ≤rule‚ü©, ‚ü®idtoeqv, prop_uniq‚ü©)‚ü©

@[hott] noncomputable def propext {Œ± Œ≤ : Type u}
  (F : prop Œ±) (G : prop Œ≤) : (Œ± ‚Üî Œ≤) ‚Üí Œ± = Œ≤ :=
Œª h, ua (prop_equiv_lemma F G h.left h.right)

@[hott] noncomputable def ua_trans :
  Œ† {Œ± Œ≤ : Type u} (p : Œ± ‚âÉ Œ≤) {Œ≥ : Type u} (q : Œ≤ ‚âÉ Œ≥),
    ua (equiv.trans p q) = ua p ‚¨ù ua q :=
begin
  fapply @J (Œª Œ± Œ≤ (p : Œ± ‚âÉ Œ≤), Œ† {Œ≥ : Type u} (q : Œ≤ ‚âÉ Œ≥),
    ua (equiv.trans p q) = ua p ‚¨ù ua q),
  fapply J, intro Œ¥, symmetry, transitivity,
  apply Id.map, apply refl_on_ua,
  apply types.Id.refl_right
end

@[hott] def is_zero : ‚Ñï ‚Üí bool
|    0    := tt
| (_ + 1) := ff

@[hott] example (h : 0 = 1) : ùüé :=
ff_neq_tt (is_zero # h)‚Åª¬π

@[hott] def succ_neq_zero {n : ‚Ñï} : ¬¨(nat.succ n = 0) :=
Œª h, ff_neq_tt (is_zero # h)

@[hott] def neg_bool_equiv : bool ‚âÉ bool :=
begin existsi bnot, split; existsi bnot; intro x; induction x; trivial end

@[hott] noncomputable def coproduct_set {Œ± Œ≤ : Type}
  (f : hset Œ±) (g : hset Œ≤) : hset (Œ± + Œ≤)
| (coproduct.inl x) (coproduct.inl y) :=
  transport structures.prop (ua $ @coproduct.inl.inj' Œ± Œ≤ x y)‚Åª¬π f
| (coproduct.inl x) (coproduct.inr y) :=
  transport structures.prop (ua $ @types.coproduct.inl.inl_inr Œ± Œ≤ x y)‚Åª¬π
            structures.empty_is_prop
| (coproduct.inr x) (coproduct.inl y) :=
  transport structures.prop (ua $ @types.coproduct.inr.inr_inl Œ± Œ≤ x y)‚Åª¬π
            structures.empty_is_prop
| (coproduct.inr x) (coproduct.inr y) :=
  transport structures.prop (ua $ @coproduct.inr.inj' Œ± Œ≤ x y)‚Åª¬π g

@[hott] noncomputable def universe_not_a_set : ¬¨(hset Type) :=
begin
  intro error,
  let p : bool = bool := ua neg_bool_equiv,
  let h := transport proto.idfun p tt,
  let g : h = ff := transport_rule neg_bool_equiv tt,
  let oops : h = tt :=
    (Œª p, transport proto.idfun p tt) #
      (error p (idp bool)),
  let uh_oh : ff = tt := g‚Åª¬π ‚¨ù oops,
  apply ff_neq_tt, exact uh_oh
end

-- exercise 2.17 (i) in HoTT book
@[hott] noncomputable def product_equiv‚ÇÅ {Œ± Œ±' Œ≤ Œ≤' : Type u}
  (e‚ÇÅ : Œ± ‚âÉ Œ±') (e‚ÇÇ : Œ≤ ‚âÉ Œ≤') : (Œ± √ó Œ≤) ‚âÉ (Œ±' √ó Œ≤') :=
begin
  have p := ua e‚ÇÅ, have q := ua e‚ÇÇ,
  induction p, induction q, reflexivity
end

@[hott] noncomputable def product_equiv‚ÇÇ {Œ± Œ±' Œ≤ Œ≤' : Type u}
  (e‚ÇÅ : Œ± ‚âÉ Œ±') (e‚ÇÇ : Œ≤ ‚âÉ Œ≤') : (Œ± √ó Œ≤) ‚âÉ (Œ±' √ó Œ≤') :=
begin
  refine J _ e‚ÇÅ, intro A,
  refine J _ e‚ÇÇ, intro B,
  reflexivity
end

section
  open ground_zero.types.product
  @[hott] def product_equiv‚ÇÉ {Œ± : Type u} {Œ±' : Type v} {Œ≤ : Type u'} {Œ≤' : Type v'}
    (e‚ÇÅ : Œ± ‚âÉ Œ±') (e‚ÇÇ : Œ≤ ‚âÉ Œ≤') : (Œ± √ó Œ≤) ‚âÉ (Œ±' √ó Œ≤') :=
  begin
    existsi (bimap e‚ÇÅ.forward e‚ÇÇ.forward), split,
    { existsi (bimap e‚ÇÅ.left e‚ÇÇ.left), intro x,
      induction x with a b, apply construction,
      apply e‚ÇÅ.left_forward, apply e‚ÇÇ.left_forward },
    { existsi (bimap e‚ÇÅ.right e‚ÇÇ.right), intro x,
      induction x with a b, apply construction,
      apply e‚ÇÅ.forward_right, apply e‚ÇÇ.forward_right }
  end
end

@[hott] def family_on_bool {œÄ : bool ‚Üí Type u} :
  (œÄ ff √ó œÄ tt) ‚âÉ Œ† (b : bool), œÄ b := begin
  let construct : (œÄ ff √ó œÄ tt) ‚Üí Œ† (b : bool), œÄ b :=
  begin
    intros x b, cases x with p q,
    cases b, exact p, exact q
  end,
  let deconstruct : (Œ† (b : bool), œÄ b) ‚Üí (œÄ ff √ó œÄ tt) :=
  begin intro H, split, exact H ff, exact H tt end,
  existsi construct, split; existsi deconstruct,
  { intro x, cases x with p q, reflexivity },
  { intro x, apply theorems.funext,
    intro b, induction b,
    repeat { reflexivity } }
end

end ua
end ground_zero