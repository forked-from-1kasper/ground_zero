import ground_zero.proto ground_zero.meta.hott_theory

namespace ground_zero.types
universes u v

theorem UIP {Œ± : Type u} {a b : Œ±} (p q : a = b) : p = q :=
by trivial

inductive Id {Œ± : Type u} (a : Œ±) : Œ± ‚Üí Type u
| refl : Id a

attribute [hott, refl] Id.refl

hott theory
notation a ` = ` b ` :> ` Œ± := @Id Œ± a b

/- fails!
theorem UIP‚ÇÅ {Œ± : Type u} {a b : Œ±} (p q : a = b :> Œ±) :
  p = q :> (a = b :> Œ±) :=
by trivial
-/

abbreviation idp {Œ± : Type u} (a : Œ±) : a = a :> Œ± := Id.refl

namespace Id
  @[hott, trans] def trans {Œ± : Type u} {a b c : Œ±}
    (p : a = b :> Œ±) (q : b = c :> Œ±) : a = c :> Œ± :=
  begin induction p, assumption end

  @[hott, symm] def symm {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    b = a :> Œ± :=
  begin induction p, reflexivity end

  abbreviation inv {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) := symm p

  infixl ` ‚¨ù `:99 := trans
  postfix ‚Åª¬π := symm

  @[hott] def comp_inv {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    p ‚¨ù p‚Åª¬π = Id.refl :> a = a :> Œ± :=
  begin induction p, trivial end

  @[hott] def inv_comp {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    p‚Åª¬π ‚¨ù p = Id.refl :> b = b :> Œ± :=
  begin induction p, trivial end

  @[hott] def refl_left {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    Id.refl ‚¨ù p = p :> a = b :> Œ± :=
  begin induction p, trivial end

  @[hott] def refl_right {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    p ‚¨ù Id.refl = p :> a = b :> Œ± :=
  begin induction p, trivial end

  @[hott] def refl_twice {Œ± : Type u} {a b : Œ±} (p : a = b :> Œ±) :
    Id.refl ‚¨ù p ‚¨ù Id.refl = p :> a = b :> Œ± :=
  begin induction p, trivial end

  @[hott] def explode_inv {Œ± : Type u} {a b c : Œ±}
    (p : a = b :> Œ±) (q : b = c :> Œ±) :
    (p ‚¨ù q)‚Åª¬π = q‚Åª¬π ‚¨ù p‚Åª¬π :> c = a :> Œ± :=
  begin induction p, induction q, trivial end

  @[hott] def inv_inv {Œ± : Type u} {a b : Œ±}
    (p : a = b :> Œ±) : (p‚Åª¬π)‚Åª¬π = p :> a = b :> Œ± :=
  begin induction p, trivial end

  @[hott] def assoc {Œ± : Type u} {a b c d : Œ±}
    (p : a = b :> Œ±) (q : b = c :> Œ±) (r : c = d :> Œ±) :
    p ‚¨ù (q ‚¨ù r) = (p ‚¨ù q) ‚¨ù r :=
  begin induction p, trivial end

  @[hott] def mpr {Œ± Œ≤ : Type u} (p : Œ± = Œ≤) : Œ≤ ‚Üí Œ± :=
  begin induction p, intro x, exact x end

  @[hott] def map {Œ± : Type u} {Œ≤ : Type v} {a b : Œ±}
    (f : Œ± ‚Üí Œ≤) (p : a = b :> Œ±) : f a = f b :> Œ≤ :=
  begin induction p, reflexivity end
  infix [parsing_only] ` # ` := map

  @[hott] def cancel_comp_inv {Œ± : Type u} {a b c : Œ±} (p : a = b) (q : b = c) : (p ‚¨ù q) ‚¨ù q‚Åª¬π = p :=
  (assoc p q q‚Åª¬π)‚Åª¬π ‚¨ù (trans p) # (comp_inv q) ‚¨ù (refl_right p)

  @[hott] def cancel_inv_comp {Œ± : Type u} {a b c : Œ±} (p : a = b) (q : c = b) : (p ‚¨ù q‚Åª¬π) ‚¨ù q = p :=
  (assoc p q‚Åª¬π q)‚Åª¬π ‚¨ù (trans p) # (inv_comp q) ‚¨ù (refl_right p)

  @[hott] def map_inv {Œ± : Type u} {Œ≤ : Type v} {a b : Œ±}
    (f : Œ± ‚Üí Œ≤) (p : a = b :> Œ±) : (f # p‚Åª¬π) = (f # p)‚Åª¬π :=
  begin induction p, reflexivity end

  @[hott] def trans_cancel_left {Œ± : Type u} {a b c : Œ±}
    (r : a = b) (p q : b = c) : r ‚¨ù p = r ‚¨ù q ‚Üí p = q :=
  begin intro Œº, induction r, exact Œº end

  @[hott] def trans_cancel_right {Œ± : Type u} {a b c : Œ±}
    (r : b = c) (p q : a = b) : p ‚¨ù r = q ‚¨ù r ‚Üí p = q :=
  begin
    intro Œº, induction r,
    transitivity, { symmetry, apply refl_right },
    symmetry, transitivity, { symmetry, apply refl_right },
    exact Œº‚Åª¬π
  end

  @[hott] def id_conj_if_comm {Œ± : Type u} {a : Œ±}
    (p q : a = a) : p ‚¨ù q = q ‚¨ù p ‚Üí q‚Åª¬π ‚¨ù p ‚¨ù q = p :=
  begin
    intro r, apply trans_cancel_left q,
    transitivity, apply Id.assoc,
    transitivity, apply Id.map (‚¨ù q),
    transitivity, apply Id.assoc, apply Id.map (‚¨ù p),
    apply Id.comp_inv, exact r
  end

  section
    variables {Œ± : Type u} {Œ≤ : Type v} {a b : Œ±}
              (f : Œ± ‚Üí Œ≤) (p : a = b :> Œ±)

    abbreviation cong := map f p
    abbreviation ap := map f p
  end

  @[hott] def ap‚ÇÇ {Œ± : Type u} {Œ≤ : Type v} {a b : Œ±}
    {p q : a = b :> Œ±} (f : Œ± ‚Üí Œ≤)
    (r : p = q :> a = b :> Œ±) :
    f # p = f # q :> f a = f b :> Œ≤ :=
  begin induction r, reflexivity end

  class dotted (space : Type u) :=
  (point : space)

  structure pointed :=
  (space : Type u) (point : space)

  notation `Type‚Åé` := pointed

  def pointed.map (Œ± Œ≤ : Type‚Åé) :=
  Œ£ (f : Œ±.space ‚Üí Œ≤.space), f Œ±.point = Œ≤.point
  notation `Map‚Åé` := pointed.map

  namespace pointed.map
    variables {Œ± Œ≤ : Type‚Åé} (œÜ : Map‚Åé Œ± Œ≤)

    def ap : Œ±.space ‚Üí Œ≤.space := œÜ.fst
    def id : œÜ.ap Œ±.point = Œ≤.point := œÜ.snd
  end pointed.map

  def loop_space (X : Type‚Åé) : Type‚Åé :=
  ‚ü®X.point = X.point :> X.space, Id.refl‚ü©

  def iterated_loop_space : Type‚Åé ‚Üí ‚Ñï ‚Üí Type‚Åé
  | X    0    := X
  | X (n + 1) := iterated_loop_space (loop_space X) n

  def loop_pointed_space (Œ± : Type u) [h : dotted Œ±] :=
  iterated_loop_space ‚ü®Œ±, dotted.point‚ü©

  notation `Œ©` `[` n `]` `, ` X := (iterated_loop_space X n).space
  notation `Œò` `[` n `]` `, ` X := (iterated_loop_space X n).point

  notation `Œ©¬π`:25 X := (loop_pointed_space X 1).space
end Id

def not (Œ± : Type u) : Type u := Œ± ‚Üí (ùüé : Type)
def neq {Œ± : Type u} (a b : Œ±) := not (Id a b)

namespace not
  notation `¬¨` Œ± := not Œ±
  infix ` ‚â† `    := neq

  def absurd {Œ± : Type u} {Œ≤ : Type v} (h : Œ±) (g : ¬¨Œ±) : Œ≤ :=
  ground_zero.proto.empty.cases_on (Œª _, Œ≤) (g h)

  def univ : (ùüé : Type u) ‚Üí (ùüé : Type v).
end not

namespace whiskering
  variables {Œ± : Type u} {a b c : Œ±}
  variables {p q : a = b :> Œ±} {r s : b = c :> Œ±}
  variables {ŒΩ : p = q} {Œ∫ : r = s}

  @[hott] def right_whs (ŒΩ : p = q) (r : b = c) : p ‚¨ù r = q ‚¨ù r :=
  begin
    induction r,
    exact (Id.refl_right p) ‚¨ù ŒΩ ‚¨ù (Id.refl_right q)‚Åª¬π
  end
  infix ` ‚¨ù·µ£ `:60 := right_whs

  @[hott] def left_whs (q : a = b) (Œ∫ : r = s) : q ‚¨ù r = q ‚¨ù s :=
  begin
    induction q,
    exact (Id.refl_left r) ‚¨ù Œ∫ ‚¨ù (Id.refl_left s)‚Åª¬π
  end
  infix ` ‚¨ù‚Çó `:60 := left_whs

  @[hott] def horizontal_comp‚ÇÅ (ŒΩ : p = q) (Œ∫ : r = s) :=
  (ŒΩ ‚¨ù·µ£ r) ‚¨ù (q ‚¨ù‚Çó Œ∫)
  infix ` ‚ãÜ `:65 := horizontal_comp‚ÇÅ

  @[hott] def horizontal_comp‚ÇÇ (ŒΩ : p = q) (Œ∫ : r = s) :=
  (p ‚¨ù‚Çó Œ∫) ‚¨ù (ŒΩ ‚¨ù·µ£ s)
  infix ` ‚ãÜ‚Ä≤ `:65 := horizontal_comp‚ÇÇ

  @[hott] lemma comp_uniq : ŒΩ ‚ãÜ Œ∫ = ŒΩ ‚ãÜ‚Ä≤ Œ∫ :=
  begin
    induction p, induction r,
    induction ŒΩ, induction Œ∫,
    reflexivity
  end

  @[hott] lemma loop‚ÇÅ {Œ± : Type u} {a : Œ±}
    {ŒΩ Œ∫ : idp a = idp a} : ŒΩ ‚¨ù Œ∫ = ŒΩ ‚ãÜ Œ∫ :=
  begin
    symmetry, transitivity,
    { apply Id.map (‚¨ù Id.refl ‚¨ù Œ∫ ‚¨ù Id.refl),
      apply Id.refl_twice },
    apply Id.map (Œª p, ŒΩ ‚¨ù p), apply Id.refl_twice
  end

  @[hott] lemma loop‚ÇÇ {Œ± : Type u} {a : Œ±}
    {ŒΩ Œ∫ : idp a = idp a} : ŒΩ ‚ãÜ‚Ä≤ Œ∫ = Œ∫ ‚¨ù ŒΩ :=
  begin
    transitivity,
    { apply Id.map (‚¨ù Id.refl ‚¨ù ŒΩ ‚¨ù Id.refl),
      apply Id.refl_twice },
    apply Id.map (Œª p, Œ∫ ‚¨ù p), apply Id.refl_twice
  end

  @[hott] theorem ¬´Eckmann‚ÄìHilton argument¬ª {Œ± : Type u} {a : Œ±}
    (ŒΩ Œ∫ : idp a = idp a) : ŒΩ ‚¨ù Œ∫ = Œ∫ ‚¨ù ŒΩ :=
  loop‚ÇÅ ‚¨ù comp_uniq ‚¨ù loop‚ÇÇ
end whiskering

end ground_zero.types