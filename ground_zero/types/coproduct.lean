import ground_zero.types.equiv

namespace ground_zero.types

hott theory

universes u v w

abbreviation coproduct (Œ± : Type u) (Œ≤ : Type v) := sum Œ± Œ≤
infix ` + ` := coproduct

namespace coproduct
  variables {Œ± : Type u} {Œ≤ : Type v}

  @[pattern] abbreviation inl : Œ± ‚Üí Œ± + Œ≤ := sum.inl
  @[pattern] abbreviation inr : Œ≤ ‚Üí Œ± + Œ≤ := sum.inr

  @[hott] def elim {Œ≥ : Type w} (g‚ÇÄ : Œ± ‚Üí Œ≥) (g‚ÇÅ : Œ≤ ‚Üí Œ≥) : Œ± + Œ≤ ‚Üí Œ≥
  | (inl a) := g‚ÇÄ a
  | (inr b) := g‚ÇÅ b

  @[hott] def inv : Œ± + Œ≤ ‚Üí Œ≤ + Œ±
  | (coproduct.inl x) := coproduct.inr x
  | (coproduct.inr x) := coproduct.inl x

  @[hott] def symm : Œ± + Œ≤ ‚âÉ Œ≤ + Œ± :=
  begin
    existsi inv, split; existsi inv;
    { intro x, induction x; trivial }
  end

  namespace inl
    @[hott] def code (a‚ÇÄ : Œ±) : Œ± + Œ≤ ‚Üí Type u
    | (inl a) := a‚ÇÄ = a :> Œ±
    | (inr b) := ùüé

    @[hott] def encode {a‚ÇÄ : Œ±} {x : Œ± + Œ≤} (p : inl a‚ÇÄ = x) : code a‚ÇÄ x :=
    equiv.transport (code a‚ÇÄ) p Id.refl

    @[hott] def decode {a‚ÇÄ : Œ±} : Œ† {x : Œ± + Œ≤} (c : code a‚ÇÄ x), inl a‚ÇÄ = x
    | (inl a) c := inl # c
    | (inr b) c := by cases c

    @[hott] def decode_encode {a‚ÇÄ : Œ±} {x : Œ± + Œ≤}
      (p : inl a‚ÇÄ = x) : decode (encode p) = p :=
    begin induction p, trivial end

    @[hott] def encode_decode {a‚ÇÄ : Œ±} {x : Œ± + Œ≤} (c : code a‚ÇÄ x) :
      encode (decode c) = c :=
    begin
      induction x,
      { transitivity, symmetry, apply equiv.transport_comp,
        apply equiv.transport_composition },
      { cases c }
    end

    @[hott] def recognize (a‚ÇÄ : Œ±) (x : Œ± + Œ≤) :
      (inl a‚ÇÄ = x) ‚âÉ code a‚ÇÄ x :=
    begin
      existsi encode, split; existsi decode,
      apply decode_encode, apply encode_decode
    end

    @[hott] def inj' (x y : Œ±) : (inl x = inl y :> Œ± + Œ≤) ‚âÉ (x = y) :=
    recognize x (inl y)

    @[hott] def inl_inr (x : Œ±) (y : Œ≤) : (inl x = inr y) ‚âÉ ùüé :=
    recognize x (inr y)
  end inl

  namespace inr
    @[hott] def code (b‚ÇÄ : Œ≤) : Œ± + Œ≤ ‚Üí Type v
    | (inl a) := ùüé
    | (inr b) := b‚ÇÄ = b :> Œ≤

    @[hott] def encode {b‚ÇÄ : Œ≤} {x : Œ± + Œ≤}
      (p : inr b‚ÇÄ = x :> Œ± + Œ≤) : code b‚ÇÄ x :=
    equiv.transport (code b‚ÇÄ) p Id.refl

    @[hott] def decode {b‚ÇÄ : Œ≤} : Œ† {x : Œ± + Œ≤} (c : code b‚ÇÄ x), inr b‚ÇÄ = x
    | (inl a) c := by cases c
    | (inr b) c := inr # c

    @[hott] def decode_encode {b‚ÇÄ : Œ≤} {x : Œ± + Œ≤}
      (p : inr b‚ÇÄ = x) : decode (encode p) = p :=
    begin induction p, trivial end

    @[hott] def encode_decode {b‚ÇÄ : Œ≤} {x : Œ± + Œ≤} (c : code b‚ÇÄ x) :
      encode (decode c) = c :=
    begin
      induction x,
      { cases c },
      { transitivity, symmetry,
        apply equiv.transport_comp,
        apply equiv.transport_composition }
    end

    @[hott] def recognize (b‚ÇÄ : Œ≤) (x : Œ± + Œ≤) :
      (inr b‚ÇÄ = x :> Œ± + Œ≤) ‚âÉ code b‚ÇÄ x :=
    begin
      existsi encode, split; existsi decode,
      apply decode_encode, apply encode_decode
    end

    @[hott] def inj' (x y : Œ≤) : (inr x = inr y :> Œ± + Œ≤) ‚âÉ (x = y) :=
    recognize x (inr y)

    @[hott] def inr_inl (x : Œ≤) (y : Œ±) : (inr x = inl y :> Œ± + Œ≤) ‚âÉ ùüé :=
    recognize x (inl y)
  end inr

  @[hott] def code {Œ± Œ≤ : Type u} : Œ± + Œ≤ ‚Üí Œ± + Œ≤ ‚Üí Type u
  | (inl a) := inl.code a
  | (inr b) := inr.code b

  @[hott] def path_sum {Œ± Œ≤ : Type u} (z‚ÇÅ z‚ÇÇ : Œ± + Œ≤) (p : code z‚ÇÅ z‚ÇÇ) : z‚ÇÅ = z‚ÇÇ :=
  begin induction z‚ÇÅ; induction z‚ÇÇ; try { { apply Id.map, exact p } <|> induction p } end
end coproduct

end ground_zero.types