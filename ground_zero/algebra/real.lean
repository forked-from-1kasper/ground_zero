import ground_zero.algebra.orgraph
open ground_zero.HITs (merely merely.uniq merely.elem merely.rec merely.lift)
open ground_zero.structures (zero_eqv_set hset prop pi_prop)
open ground_zero.algebra.group (S S.carrier Subgroup)
open ground_zero.theorems
open ground_zero.types

hott theory

namespace ground_zero.algebra
  universe u

  axiom R : overring.{0 0}
  @[instance] axiom R.dedekind : dedekind R

  notation `‚Ñù` := Alg.carrier R

  noncomputable instance R.orfield : orfield R := R.dedekind.{0}.to_orfield
  noncomputable instance R.has_inv : has_inv ‚Ñù := R.dedekind.{0}.to_has_inv

  def metric {Œ± : Type u} (œÅ : Œ± ‚Üí Œ± ‚Üí ‚Ñù) :=
    (Œ† x y, œÅ x y = 0 ‚Üî x = y)
  √ó (Œ† x y, œÅ x y = œÅ y x)
  √ó (Œ† x y z, œÅ x z ‚â§ œÅ x y + œÅ y z)

  def Metric := Œ£ (Œ± : 0-Type) (œÅ : Œ±.1 ‚Üí Œ±.1 ‚Üí ‚Ñù), metric œÅ

  section
    variable (M : Metric)

    def Metric.carrier := M.1.1
    def Metric.hset : hset M.carrier :=
    Œª _ _, zero_eqv_set.forward M.1.2

    def Metric.œÅ : M.carrier ‚Üí M.carrier ‚Üí ‚Ñù := M.2.1

    def Metric.refl (x : M.carrier) : M.œÅ x x = 0 :=
    (M.2.2.1 x x).2 (idp x)

    def Metric.eqv (x y : M.carrier) : M.œÅ x y = 0 ‚Üí x = y :=
    (M.2.2.1 x y).1

    def Metric.symm (x y : M.carrier) : M.œÅ x y = M.œÅ y x :=
    M.2.2.2.1 x y

    def Metric.triangle (x y z : M.carrier) : M.œÅ x z ‚â§ M.œÅ x y + M.œÅ y z :=
    M.2.2.2.2 x y z
  end

  noncomputable def N.incl : ‚Ñï ‚Üí ‚Ñù :=
  @nat.rec (Œª _, ‚Ñù) 0 (Œª _ x, x + 1)

  @[hott] noncomputable def N.incl.add (n m : ‚Ñï) : N.incl (n + m) = N.incl n + N.incl m :=
  begin
    induction m with m ih, symmetry, apply R.œÑ‚Å∫.mul_one,
    transitivity, change N.incl (n + m) + 1 = _,
    apply @Id.map ‚Ñù ‚Ñù _ _ (+ 1) ih, apply R.œÑ‚Å∫.mul_assoc
  end

  @[hott] noncomputable def le_add_one (x : ‚Ñù) : x ‚â§ x + 1 :=
  begin
    apply equiv.transport (Œª y, y ‚â§ x + 1), apply R.œÑ‚Å∫.mul_one,
    apply le_over_add_left, apply one_gt_zero
  end

  @[hott] noncomputable def N.incl.lt : Œ† (n m : ‚Ñï), (n ‚â§ m : Type) ‚Üí N.incl n ‚â§ N.incl m
  |    0       0    := Œª _, @reflexive.refl R.Œ∫ _ (N.incl 0)
  |    0    (m + 1) := Œª _, @transitive.trans R.Œ∫ _ (N.incl 0) (N.incl m) (N.incl (m + 1))
    (N.incl.lt 0 m (nat.max.zero_left m)) (le_add_one (N.incl m))
  | (n + 1)    0    := Œª p, ground_zero.proto.empty.elim (nat.max.ne_zero p)
  | (n + 1) (m + 1) := Œª p, orfield.le_over_add (N.incl n) (N.incl m) 1 (N.incl.lt n m (nat.pred # p))

  @[hott] noncomputable def R.complete (œÜ : R.subset) (H : œÜ.inh) (G : @majorized R.Œ∫ œÜ) :
    Œ£ M, exact (@Majorant R.Œ∫ œÜ) M :=
  ((ground_zero.theorems.prop.prop_equiv (@supremum_uniqueness R.Œ∫ _ œÜ)).left
    (@complete.sup R.Œ∫ R.dedekind.to_complete œÜ H G))

  @[hott] noncomputable def R.cocomplete (œÜ : R.subset) (H : œÜ.inh) (G : @minorized R.Œ∫ œÜ) :
    Œ£ m, coexact (@Minorant R.Œ∫ œÜ) m :=
  ((ground_zero.theorems.prop.prop_equiv (@infimum_uniqueness R.Œ∫ _ œÜ)).left
    (@cocomplete.inf R.Œ∫ (orfield_cocomplete_if_complete R.dedekind.to_complete) œÜ H G))

  @[hott] noncomputable def sup (œÜ : R.subset) (H : œÜ.inh) (G : @majorized R.Œ∫ œÜ) : ‚Ñù :=
  (R.complete œÜ H G).1

  @[hott] noncomputable def sup.lawful (œÜ : R.subset) (H : œÜ.inh) (G : @majorized R.Œ∫ œÜ) :
    Œ† x, x ‚àà œÜ ‚Üí x ‚â§ sup œÜ H G :=
  (R.complete œÜ H G).2.1

  @[hott] noncomputable def sup.exact (œÜ : R.subset) (H : œÜ.inh) (G : @majorized R.Œ∫ œÜ)
    (x : ‚Ñù) (p : Œ† y, y ‚àà œÜ ‚Üí y ‚â§ x) : sup œÜ H G ‚â§ x :=
  begin apply (R.complete œÜ H G).2.2, apply p end

  @[hott] noncomputable def inf (œÜ : R.subset) (H : œÜ.inh) (G : @minorized R.Œ∫ œÜ) : ‚Ñù :=
  (R.cocomplete œÜ H G).1

  @[hott] noncomputable def inf.lawful (œÜ : R.subset) (H : œÜ.inh) (G : @minorized R.Œ∫ œÜ) :
    Œ† x, x ‚àà œÜ ‚Üí inf œÜ H G ‚â§ x :=
  (R.cocomplete œÜ H G).2.1

  @[hott] noncomputable def inf.exact (œÜ : R.subset) (H : œÜ.inh) (G : @minorized R.Œ∫ œÜ)
    (x : ‚Ñù) (p : Œ† y, y ‚àà œÜ ‚Üí x ‚â§ y) : x ‚â§ inf œÜ H G :=
  begin apply (R.cocomplete œÜ H G).2.2, apply p end

  def diameter {M : Metric} (œÜ : S.carrier M.1) :=
  im (Œª x, M.œÅ x (œÜ.1 x))

  def limited {M : Metric} (œÜ : S.carrier M.1) :=
  merely (Œ£ m, Œ† x, M.œÅ x (œÜ.1 x) ‚â§ m)

  @[hott] noncomputable def diameter.majorized_if_limited {M : Metric}
    (œÜ : S.carrier M.1) : limited œÜ ‚Üí @majorized R.Œ∫ (diameter œÜ) :=
  begin
    apply merely.lift, intro H, existsi H.1, intro x, apply merely.rec, apply R.Œ∫.prop,
    intro p, apply equiv.transport (Œª y, y ‚â§ H.1), apply p.2, apply H.2
  end

  @[hott] noncomputable def lim (M : Metric) : (S M.1).subgroup :=
  begin
    fapply sigma.mk, existsi @limited M, intro, apply merely.uniq, split,
    { apply merely.elem, existsi R.œÑ.zero, intro x,
      apply equiv.transport (Œª y, y ‚â§ R.œÑ.zero), symmetry,
      apply M.refl, apply @reflexive.refl R.Œ∫ }, split,
    { intros a b, apply ground_zero.HITs.merely.lift‚ÇÇ,
      intros p q, existsi q.1 + p.1, intro x,
      apply @transitive.trans R.Œ∫, apply M.triangle,
      exact b.1 x, apply ineq_add, apply q.2, apply p.2 },
    { intro a, apply ground_zero.HITs.merely.lift, intro p, existsi p.1,
      intro x, apply equiv.transport (Œª y, y ‚â§ p.1),
      symmetry, transitivity, apply M.symm, apply Id.map (M.œÅ _),
      symmetry, apply equiv.forward_right a, apply p.2 }
  end

  @[hott] noncomputable def Lim (M : Metric) : pregroup :=
  Subgroup (S M.1) (lim M)

  noncomputable instance Lim.group (M : Metric) : group (Lim M) :=
  group.subgroup.group

  abbreviation Lim.carrier (M : Metric) := (Lim M).carrier
  noncomputable abbreviation Lim.œÜ {M : Metric} := (Lim M).œÜ
  noncomputable abbreviation Lim.Œπ {M : Metric} := (Lim M).Œπ

  def Metric.pointed := Œ£ (M : Metric), M.carrier
  notation `Metric‚Åé` := Metric.pointed

  @[hott] noncomputable def œâ (M : Metric‚Åé) (œÜ : Lim.carrier M.1) : ‚Ñù :=
  sup (diameter œÜ.1) (im.inh _ M.2) (diameter.majorized_if_limited œÜ.1 œÜ.2)

  @[hott] noncomputable def sup.eqv {œÜ œà : R.subset} {H‚ÇÅ : œÜ.inh} {H‚ÇÇ : œà.inh}
    {G‚ÇÅ : @majorized R.Œ∫ œÜ} {G‚ÇÇ : @majorized R.Œ∫ œà} (p : œÜ = œà) : sup œÜ H‚ÇÅ G‚ÇÅ = sup œà H‚ÇÇ G‚ÇÇ :=
  begin induction p, apply equiv.bimap; apply merely.uniq end

  @[hott] noncomputable def sup.le {œÜ œà : R.subset} {H‚ÇÅ : œÜ.inh} {H‚ÇÇ : œà.inh}
    {G‚ÇÅ : @majorized R.Œ∫ œÜ} {G‚ÇÇ : @majorized R.Œ∫ œà} (y : ‚Ñù) (p : y ‚àà œà)
    (r : Œ† x, x ‚àà œÜ ‚Üí x ‚â§ y) : sup œÜ H‚ÇÅ G‚ÇÅ ‚â§ sup œà H‚ÇÇ G‚ÇÇ :=
  begin
    apply sup.exact, intros x q, apply @transitive.trans R.Œ∫ _,
    apply r, exact q, apply sup.lawful, exact p
  end

  @[hott] noncomputable def sup.sep {œÜ œà : R.subset} {H‚ÇÅ : œÜ.inh} {H‚ÇÇ : œà.inh}
    {G‚ÇÅ : @majorized R.Œ∫ œÜ} {G‚ÇÇ : @majorized R.Œ∫ œà} (r : Œ† x y, x ‚àà œÜ ‚Üí y ‚àà œà ‚Üí x ‚â§ y) :
      sup œÜ H‚ÇÅ G‚ÇÅ ‚â§ sup œà H‚ÇÇ G‚ÇÇ :=
  begin
    apply merely.rec _ _ H‚ÇÇ, apply R.Œ∫.prop, intro p, induction p with y p,
    apply sup.le, apply p, intros x q, apply r; assumption
  end

  @[hott] noncomputable def sup.ssubset {œÜ œà : R.subset} {H‚ÇÅ : œÜ.inh} {H‚ÇÇ : œà.inh}
    {G‚ÇÅ : @majorized R.Œ∫ œÜ} {G‚ÇÇ : @majorized R.Œ∫ œà} (r : œÜ ‚äÜ œà) : sup œÜ H‚ÇÅ G‚ÇÅ ‚â§ sup œà H‚ÇÇ G‚ÇÇ :=
  begin apply sup.exact, intros y p, apply sup.lawful, apply r, assumption end

  @[hott] noncomputable def œâ.inv_le (M : Metric‚Åé) (œÜ : Lim.carrier M.1) : œâ M (Lim.Œπ œÜ) ‚â§ œâ M œÜ :=
  begin
    apply sup.ssubset, intro x, apply merely.lift, intro p,
    induction p with y p, induction p, existsi (Lim.Œπ œÜ).1.1 y,
    symmetry, transitivity, apply M.1.symm,
    apply Id.map, symmetry, apply œÜ.1.forward_right
  end

  @[hott] noncomputable def œâ.inv (M : Metric‚Åé) (œÜ : Lim.carrier M.1) : œâ M (Lim.Œπ œÜ) = œâ M œÜ :=
  begin
    apply @antisymmetric.asymm R.Œ∫, apply œâ.inv_le,
    apply equiv.transport (Œª œà, œâ M œà ‚â§ œâ M (Lim.Œπ œÜ)),
    apply @group.inv_inv (Lim M.1), apply œâ.inv_le
  end

  @[hott] noncomputable def œâ.mul_rev (M : Metric‚Åé) (œÜ œà : Lim.carrier M.1) :
    œâ M (Lim.œÜ œÜ œà) ‚â§ œâ M œà + œâ M œÜ :=
  begin
    apply sup.exact, intro x, apply merely.rec, apply R.Œ∫.prop,
    intro p, induction p with y p, induction p, apply @transitive.trans R.Œ∫,
    apply M.1.triangle, exact œà.1.1 y, apply ineq_add;
    { apply sup.lawful, apply im.intro }
  end

  @[hott] noncomputable def œâ.mul (M : Metric‚Åé) (œÜ œà : Lim.carrier M.1) :
    œâ M (Lim.œÜ œÜ œà) ‚â§ œâ M œÜ + œâ M œà :=
  begin apply equiv.transport (Œª y, œâ M (Lim.œÜ œÜ œà) ‚â§ y), apply R.œÑ‚Å∫.mul_comm, apply œâ.mul_rev end

  @[hott] noncomputable def R.not_not_total (x y : ‚Ñù) : (x ‚â§ y) ‚Üí (x > y) ‚Üí ùüé :=
  begin intros p q, apply q.1, apply @antisymmetric.asymm R.Œ∫, exact q.2, exact p end

  @[hott] noncomputable def R.total_is_prop (x y : ‚Ñù) : prop ((x ‚â§ y) + (x > y)) :=
  begin
    intros p q, induction p with p‚ÇÅ p‚ÇÇ; induction q with q‚ÇÅ q‚ÇÇ,
    { apply Id.map, apply R.Œ∫.prop },
    { apply ground_zero.proto.empty.elim, apply R.not_not_total x y; assumption },
    { apply ground_zero.proto.empty.elim, apply R.not_not_total x y; assumption },
    { apply Id.map, induction p‚ÇÇ with p p', induction q‚ÇÇ with q q',
      apply product.prod, apply ground_zero.structures.not_is_prop, apply R.Œ∫.prop }
  end

  @[hott] noncomputable def R.total (x y : ‚Ñù) : (x ‚â§ y) + (x > y) :=
  begin
    apply (ground_zero.theorems.prop.prop_equiv _).left,
    apply merely.lift _ (@connected.total R.Œ∫ _ x y),
    { intro H, induction H with p q, left, assumption,
      cases @classical.lem (x = y) _ with p‚ÇÅ p‚ÇÇ,
      left, induction p‚ÇÅ, apply @reflexive.refl R.Œ∫,
      right, split, intro r, apply p‚ÇÇ,
      exact Id.symm r, exact q, apply R.hset },
    { apply R.total_is_prop }
  end

  @[hott] noncomputable def abs (x : ‚Ñù) : ‚Ñù :=
  coproduct.elim (Œª _, x) (Œª _, -x) (R.total 0 x)

  @[hott] noncomputable def abs.pos {x : ‚Ñù} (p : 0 ‚â§ x) : abs x = x :=
  begin
    change coproduct.elim _ _ _ = _, cases R.total 0 x with q‚ÇÅ q‚ÇÇ,
    reflexivity, apply ground_zero.proto.empty.elim,
    apply R.not_not_total 0 x; assumption
  end

  @[hott] noncomputable def R.zero_eq_minus_zero {x : ‚Ñù} (p : x = 0) : x = -x :=
  begin
    transitivity, exact p, symmetry,
    transitivity, apply Id.map, exact p,
    symmetry, apply @group.unit_inv R.œÑ‚Å∫
  end

  @[hott] noncomputable def abs.neg {x : ‚Ñù} (p : x ‚â§ 0) : abs x = -x :=
  begin
    change coproduct.elim _ _ _ = _, cases R.total 0 x with q‚ÇÅ q‚ÇÇ,
    change x = -x, apply R.zero_eq_minus_zero,
    apply @antisymmetric.asymm R.Œ∫; assumption, reflexivity
  end

  @[hott] noncomputable def R.zero_le_impl_zero_ge_minus {x : ‚Ñù} (p : 0 ‚â§ x) : -x ‚â§ 0 :=
  begin
    apply equiv.transport (Œª y, -x ‚â§ y), symmetry,
    apply @group.unit_inv R.œÑ‚Å∫, apply minus_inv_sign, exact p
  end

  @[hott] noncomputable def R.zero_le_minus_impl_zero_ge {x : ‚Ñù} (p : 0 ‚â§ -x) : x ‚â§ 0 :=
  begin
    apply equiv.transport (Œª (y : ‚Ñù), y ‚â§ 0), apply @group.inv_inv R.œÑ‚Å∫,
    apply R.zero_le_impl_zero_ge_minus, assumption
  end

  @[hott] noncomputable def R.zero_ge_minus_impl_zero_le {x : ‚Ñù} (p : -x ‚â§ 0) : 0 ‚â§ x :=
  begin
    apply inv_minus_sign, apply equiv.transport (Œª y, -x ‚â§ y),
    apply @group.unit_inv R.œÑ‚Å∫, exact p
  end

  @[hott] noncomputable def R.zero_ge_impl_zero_le_minus {x : ‚Ñù} (p : x ‚â§ 0) : 0 ‚â§ -x :=
  begin
    apply R.zero_ge_minus_impl_zero_le, apply equiv.transport (Œª (y : ‚Ñù), y ‚â§ 0),
    symmetry, apply @group.inv_inv R.œÑ‚Å∫, assumption
  end

  @[hott] noncomputable def abs.even (x : ‚Ñù) : abs x = abs (-x) :=
  begin
    cases (R.total 0 x) with p q,
    { transitivity, apply abs.pos p, symmetry,
      transitivity, apply abs.neg,
      apply R.zero_le_impl_zero_ge_minus p,
      apply @group.inv_inv R.œÑ‚Å∫ },
    { transitivity, apply abs.neg q.2, symmetry, apply abs.pos,
      apply R.zero_ge_impl_zero_le_minus q.2 }
  end

  @[hott] noncomputable def abs.ge (x : ‚Ñù) : x ‚â§ abs x :=
  begin
    cases (R.total 0 x) with p q,
    { apply equiv.transport (Œª y, x ‚â§ y), symmetry,
      apply abs.pos p, apply @reflexive.refl R.Œ∫ },
    { apply equiv.transport (Œª y, x ‚â§ y), symmetry,
      apply abs.neg q.2, apply @transitive.trans R.Œ∫,
      apply q.2, apply R.zero_ge_impl_zero_le_minus q.2 }
  end

  @[hott] noncomputable def abs.le (x : ‚Ñù) : -(abs x) ‚â§ x :=
  begin
    cases (R.total 0 x) with p q,
    { apply equiv.transport (Œª (y : ‚Ñù), y ‚â§ x), symmetry,
      apply Id.map, apply abs.pos p, apply @transitive.trans R.Œ∫,
      apply R.zero_le_impl_zero_ge_minus p, assumption },
    { apply equiv.transport (Œª (y : ‚Ñù), y ‚â§ x), symmetry,
      transitivity, apply Id.map, apply abs.neg q.2,
      apply @group.inv_inv R.œÑ‚Å∫, apply @reflexive.refl R.Œ∫ }
  end

  @[hott] noncomputable def abs.le_if_minus_le_and_le (x y : ‚Ñù) (r‚ÇÅ : -x ‚â§ y) (r‚ÇÇ : y ‚â§ x) : abs y ‚â§ x :=
  begin
    cases (R.total 0 y) with p q,
    { apply equiv.transport (Œª z, z ‚â§ x), symmetry,
      apply abs.pos p, assumption },
    { apply equiv.transport (Œª z, z ‚â§ x), symmetry,
      apply abs.neg q.2, apply inv_minus_sign,
      apply equiv.transport (Œª z, -x ‚â§ z), symmetry,
      apply @group.inv_inv R.œÑ‚Å∫, assumption }
  end

  @[hott] noncomputable def abs.ge_zero (x : ‚Ñù) : 0 ‚â§ abs x :=
  begin
    cases (R.total 0 x) with p q,
    { apply equiv.transport (Œª (y : ‚Ñù), 0 ‚â§ y),
      symmetry, apply abs.pos p, assumption },
    { apply equiv.transport (Œª (y : ‚Ñù), 0 ‚â§ y), symmetry, apply abs.neg q.2,
      apply R.zero_ge_impl_zero_le_minus, exact q.2, }
  end

  @[hott] noncomputable def abs.le_if_abs_le (x y : ‚Ñù) (r : abs y ‚â§ x) : y ‚â§ x :=
  begin apply @transitive.trans R.Œ∫, apply abs.ge, assumption end

  @[hott] noncomputable def abs.ge_if_abs_le (x y : ‚Ñù) (r : abs y ‚â§ x) : -x ‚â§ y :=
  begin
    apply ge_if_minus_le, apply @transitive.trans R.Œ∫,
    apply ge_if_minus_le, apply abs.le, assumption
  end

  @[hott] noncomputable def triangle (x y : ‚Ñù) : abs (x + y) ‚â§ abs x + abs y :=
  begin
    apply abs.le_if_minus_le_and_le,
    { apply equiv.transport (Œª z, z ‚â§ x + y), symmetry, transitivity,
      apply @group.inv_explode R.œÑ‚Å∫, apply R.œÑ‚Å∫.mul_comm,
      apply ineq_add; apply abs.le },
    { apply ineq_add; apply abs.ge }
  end

  @[hott] noncomputable def triangle_sub (x y z : ‚Ñù) : abs (x - z) ‚â§ abs (x - y) + abs (y - z) :=
  begin
    apply equiv.transport (Œª w, w ‚â§ abs (x - y) + abs (y - z)),
    apply Id.map abs, apply @group.chain_rdiv R.œÑ‚Å∫ _ x y z, apply triangle
  end

  @[hott] noncomputable def abs.zero : abs 0 = 0 :=
  begin apply abs.pos, apply @reflexive.refl R.Œ∫ end

  @[hott] noncomputable def R.le_if_eq {x y : ‚Ñù} (p : x = y) : x ‚â§ y :=
  begin induction p, apply @reflexive.refl R.Œ∫ end

  @[hott] noncomputable def R.ge_if_eq {x y : ‚Ñù} (p : x = y) : x ‚â§ y :=
  begin induction p, apply @reflexive.refl R.Œ∫ end

  @[hott] noncomputable def abs.zero_if (x : ‚Ñù) (p : abs x = 0) : x = 0 :=
  begin
    apply @antisymmetric.asymm R.Œ∫, { induction p, apply abs.ge },
    { apply equiv.transport (Œª y, y ‚â§ x), symmetry, apply @group.unit_inv R.œÑ‚Å∫,
      apply @transitive.trans R.Œ∫, apply minus_inv_sign,
      apply R.le_if_eq p, apply abs.le }
  end

  @[hott] noncomputable def R.metrizable : metric (Œª x y, abs (x - y)) :=
  begin
    apply (_, (_, _)),
    { intros x y, split; intro p,
      { apply @group.eq_of_rdiv_eq R.œÑ‚Å∫,
        apply abs.zero_if, assumption },
      { induction p, change abs (x - x) = _, transitivity,
        apply Id.map, apply @group.mul_right_inv R.œÑ‚Å∫, apply abs.zero } },
    { intros x y, transitivity, apply abs.even, apply Id.map,
      transitivity, apply @group.inv_explode R.œÑ‚Å∫,
      apply Id.map (Œª z, z - x), apply @group.inv_inv R.œÑ‚Å∫ },
    { apply triangle_sub }
  end

  @[hott] noncomputable def R‚Çò : Metric :=
  ‚ü®R.1, ‚ü®Œª x y, abs (x - y), R.metrizable‚ü©‚ü©

  @[hott] noncomputable def R.pointed : Metric‚Åé := ‚ü®R‚Çò, R.œÑ‚Å∫.e‚ü©
  notation `R‚Åé` := R.pointed

  @[hott] noncomputable def Lim.œÅ {M : Metric‚Åé} (g h : Lim.carrier M.1) :=
  œâ M (Lim.œÜ g (Lim.Œπ h))

  @[hott] noncomputable def R.singleton : ‚Ñù ‚Üí ens ‚Ñù :=
  ens.singleton (Œª _ _, R.hset)

  @[hott] noncomputable def R.singl_inh : Œ† x, (R.singleton x).inh :=
  ens.singleton_inh (Œª _ _, R.hset)

  @[hott] noncomputable def R.singl_majorized (x : ‚Ñù) : @majorized R.Œ∫ (R.singleton x) :=
  begin apply merely.elem, existsi x, intros y p, induction p, apply @reflexive.refl R.Œ∫ end

  @[hott] noncomputable def sup.singleton (x : ‚Ñù) :
    sup (R.singleton x) (R.singl_inh x) (R.singl_majorized x) = x :=
  begin
    apply @antisymmetric.asymm R.Œ∫,
    { apply sup.exact, intros y p, induction p, apply @reflexive.refl R.Œ∫ },
    { apply sup.lawful, change _ = _, reflexivity }
  end

  @[hott] noncomputable def double_ge_zero_impl_ge_zero {x : ‚Ñù} : 0 ‚â§ x + x ‚Üí 0 ‚â§ x :=
  begin
    intro p, cases R.total 0 x with q‚ÇÅ q‚ÇÇ, assumption, apply ground_zero.proto.empty.elim,
    apply (strict_ineq_add R q‚ÇÇ q‚ÇÇ).1, apply @antisymmetric.asymm R.Œ∫,
    apply ineq_add; exact q‚ÇÇ.2, apply equiv.transport (Œª y, y ‚â§ x + x),
    symmetry, apply R.œÑ‚Å∫.mul_one, exact p
  end

  @[hott] noncomputable def Metric.positive (M : Metric) (x y : M.carrier) : 0 ‚â§ M.œÅ x y :=
  begin
    apply double_ge_zero_impl_ge_zero, apply equiv.transport (Œª z, z ‚â§ M.œÅ x y + M.œÅ x y),
    apply M.refl x, apply equiv.transport (Œª z, M.œÅ x x ‚â§ M.œÅ x y + z),
    apply M.symm, apply M.triangle
  end

  @[hott] noncomputable def œâ.ge_zero (M : Metric‚Åé) (g : Lim.carrier M.1) : 0 ‚â§ œâ M g :=
  begin
    apply equiv.transport (Œª y, y ‚â§ œâ M g), apply sup.singleton, apply sup.sep,
    intros x y p, apply merely.rec, apply R.Œ∫.prop, intro q,
    induction p, induction q with z q, induction q, apply M.1.positive
  end

  @[hott] noncomputable def Metric.eq_if_le_zero (M : Metric) {x y : M.carrier} :
    M.œÅ x y ‚â§ 0 ‚Üí x = y :=
  begin intro p, apply M.eqv, apply @antisymmetric.asymm R.Œ∫, exact p, apply M.positive end

  @[hott] noncomputable def œâ.eq_zero_if_less {M : Metric‚Åé}
    {g : Lim.carrier M.1} : œâ M g ‚â§ 0 ‚Üí œâ M g = 0 :=
  begin intro p, apply @antisymmetric.asymm R.Œ∫, exact p, apply œâ.ge_zero end

  @[hott] noncomputable def œâ.unit (M : Metric‚Åé) : œâ M (Lim M.1).e = 0 :=
  begin
    apply @antisymmetric.asymm R.Œ∫, apply sup.exact,
    { intro y, apply merely.rec, apply R.Œ∫.prop, intro p,
      induction p with x p, induction p, apply R.le_if_eq, apply M.1.refl },
    { apply œâ.ge_zero }
  end

  @[hott] noncomputable def œâ.unit_if_zero (M : Metric‚Åé)
    (œÜ : Lim.carrier M.1) (p : œâ M œÜ = 0) : œÜ = (Lim M.1).e :=
  begin
    apply sigma.prod, apply ens.prop, apply ground_zero.theorems.prop.equiv_hmtpy_lem,
    intro x, apply M.1.eq_if_le_zero, apply equiv.transport (Œª y, M.1.œÅ (œÜ.1.1 x) x ‚â§ y),
    exact p, apply sup.lawful, apply merely.elem, existsi x, apply M.1.symm
  end

  @[hott] noncomputable def Lim.metrizable (M : Metric‚Åé) : metric (@Lim.œÅ M) :=
  begin
    apply (_, (_, _)),
    { intros x y, split; intro p,
      { apply group.eq_of_rdiv_eq, apply œâ.unit_if_zero,
        change œâ _ _ = _ at p, exact p },
      { induction p, transitivity, apply Id.map (œâ M),
        apply group.mul_right_inv, apply œâ.unit } },
    { intros x y, transitivity, symmetry, apply œâ.inv,
      apply Id.map (œâ M), transitivity, apply group.inv_explode,
      apply Id.map (Œª z, Lim.œÜ z (Lim.Œπ x)), apply group.inv_inv },
    { intros x y z, apply equiv.transport (Œª w, w ‚â§ Lim.œÅ x y + Lim.œÅ y z),
      apply Id.map (œâ M), apply group.chain_rdiv x y z, apply œâ.mul }
  end

  @[hott] noncomputable def Lim‚Çò : Metric‚Åé ‚Üí Metric :=
  Œª M, ‚ü®(Lim M.1).1, ‚ü®Lim.œÅ, Lim.metrizable M‚ü©‚ü©

  @[hott] noncomputable def Lim.pointed : Metric‚Åé ‚Üí Metric‚Åé := Œª M, ‚ü®Lim‚Çò M, (Lim M.1).e‚ü©
  notation `Lim‚Åé` := Lim.pointed

  @[hott] noncomputable def œâ.mul_inv (M : Metric‚Åé) (œÜ œà : Lim.carrier M.1) :
    abs (œâ M œÜ - œâ M œà) ‚â§ œâ M (Lim.œÜ œÜ œà) :=
  begin
    apply abs.le_if_minus_le_and_le,
    { apply ge_if_minus_le, apply equiv.transport (Œª y, y ‚â§ œâ M (Lim.œÜ œÜ œà)),
      symmetry, apply @group.x_mul_inv_y_inv R.œÑ‚Å∫, apply sub_le_if_add_ge_rev,
      apply equiv.transport (Œª w, œâ M œà ‚â§ w + œâ M (Lim.œÜ œÜ œà)), apply œâ.inv,
      apply equiv.transport (Œª w, w ‚â§ œâ M (Lim.Œπ œÜ) + œâ M (Lim.œÜ œÜ œà)),
      apply Id.map (œâ M), symmetry, apply group.rev_cancel_left œÜ œà, apply œâ.mul },
    { apply sub_le_if_add_ge, apply equiv.transport (Œª w, œâ M œÜ ‚â§ œâ M (Lim.œÜ œÜ œà) + w),
      apply œâ.inv, apply equiv.transport (Œª w, w ‚â§ œâ M (Lim.œÜ œÜ œà) + œâ M (Lim.Œπ œà)),
      apply Id.map (œâ M), symmetry, apply group.cancel_right œÜ œà, apply œâ.mul }
  end

  def tendsto {M‚ÇÅ M‚ÇÇ : Metric} (f : M‚ÇÅ.carrier ‚Üí M‚ÇÇ.carrier) :=
  Œª x‚ÇÄ L, ‚àÄ (Œµ : ‚Ñù), 0 < Œµ ‚Üí merely (Œ£ (Œ¥ : ‚Ñù), (0 < Œ¥) √ó
    (Œ† x, 0 < M‚ÇÅ.œÅ x x‚ÇÄ ‚Üí M‚ÇÅ.œÅ x x‚ÇÄ < Œ¥ ‚Üí M‚ÇÇ.œÅ (f x) L < Œµ))

  def continuous {M‚ÇÅ M‚ÇÇ : Metric} (f : M‚ÇÅ.carrier ‚Üí M‚ÇÇ.carrier) :=
  Œª x, tendsto f x (f x)

  def continuous.pointed (M‚ÇÅ M‚ÇÇ : Metric‚Åé) := @continuous M‚ÇÅ.1 M‚ÇÇ.1
  notation `continuous‚Åé` := continuous.pointed

  @[hott] noncomputable def œâ.continuous (M : Metric‚Åé) :
    Œ† m, continuous‚Åé (Lim‚Åé M) R‚Åé (œâ M) m :=
  begin
    intros x Œµ H, apply merely.elem, existsi Œµ, split, exact H,
    intros y G‚ÇÅ G‚ÇÇ, apply equiv.transport (Œª w, abs (œâ M y - w) < Œµ),
    apply œâ.inv, apply strict_ineq_trans_left, apply œâ.mul_inv, exact G‚ÇÇ
  end
end ground_zero.algebra