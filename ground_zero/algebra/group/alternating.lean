import ground_zero.algebra.group.factor
open ground_zero.types.equiv (biinv transport)
open ground_zero.types.Id (map)
open ground_zero.structures
open ground_zero.types
open ground_zero.proto
open ground_zero

/-
  Trivial group, symmetric group, cyclic group Z‚ÇÇ,
  dihedral group D‚ÇÉ, alternating group A‚ÇÉ as its subgroup.
  * https://en.wikipedia.org/wiki/Trivial_group
  * https://en.wikipedia.org/wiki/Symmetric_group
  * https://en.wikipedia.org/wiki/Cyclic_group
  * https://en.wikipedia.org/wiki/Dihedral_group_of_order_6
  * https://en.wikipedia.org/wiki/Alternating_group

  Z‚ÇÇ ‚âÖ D‚ÇÉ\A‚ÇÉ proof.
-/

namespace ground_zero.algebra
universes u v u' v' w

hott theory

namespace group
  inductive D‚ÇÉ.carrier
  | R‚ÇÄ | R‚ÇÅ | R‚ÇÇ
  | S‚ÇÄ | S‚ÇÅ | S‚ÇÇ
  open D‚ÇÉ.carrier

  @[hott] def D‚ÇÉ.inv : D‚ÇÉ.carrier ‚Üí D‚ÇÉ.carrier
  | R‚ÇÄ := R‚ÇÄ | R‚ÇÅ := R‚ÇÇ | R‚ÇÇ := R‚ÇÅ
  | S‚ÇÄ := S‚ÇÄ | S‚ÇÅ := S‚ÇÅ | S‚ÇÇ := S‚ÇÇ

  @[hott] def D‚ÇÉ.mul : D‚ÇÉ.carrier ‚Üí D‚ÇÉ.carrier ‚Üí D‚ÇÉ.carrier
  | R‚ÇÄ R‚ÇÄ := R‚ÇÄ | R‚ÇÄ R‚ÇÅ := R‚ÇÅ | R‚ÇÄ R‚ÇÇ := R‚ÇÇ
  | R‚ÇÄ S‚ÇÄ := S‚ÇÄ | R‚ÇÄ S‚ÇÅ := S‚ÇÅ | R‚ÇÄ S‚ÇÇ := S‚ÇÇ
  | R‚ÇÅ R‚ÇÄ := R‚ÇÅ | R‚ÇÅ R‚ÇÅ := R‚ÇÇ | R‚ÇÅ R‚ÇÇ := R‚ÇÄ
  | R‚ÇÅ S‚ÇÄ := S‚ÇÅ | R‚ÇÅ S‚ÇÅ := S‚ÇÇ | R‚ÇÅ S‚ÇÇ := S‚ÇÄ
  | R‚ÇÇ R‚ÇÄ := R‚ÇÇ | R‚ÇÇ R‚ÇÅ := R‚ÇÄ | R‚ÇÇ R‚ÇÇ := R‚ÇÅ
  | R‚ÇÇ S‚ÇÄ := S‚ÇÇ | R‚ÇÇ S‚ÇÅ := S‚ÇÄ | R‚ÇÇ S‚ÇÇ := S‚ÇÅ
  | S‚ÇÄ R‚ÇÄ := S‚ÇÄ | S‚ÇÄ R‚ÇÅ := S‚ÇÇ | S‚ÇÄ R‚ÇÇ := S‚ÇÅ
  | S‚ÇÄ S‚ÇÄ := R‚ÇÄ | S‚ÇÄ S‚ÇÅ := R‚ÇÇ | S‚ÇÄ S‚ÇÇ := R‚ÇÅ
  | S‚ÇÅ R‚ÇÄ := S‚ÇÅ | S‚ÇÅ R‚ÇÅ := S‚ÇÄ | S‚ÇÅ R‚ÇÇ := S‚ÇÇ
  | S‚ÇÅ S‚ÇÄ := R‚ÇÅ | S‚ÇÅ S‚ÇÅ := R‚ÇÄ | S‚ÇÅ S‚ÇÇ := R‚ÇÇ
  | S‚ÇÇ R‚ÇÄ := S‚ÇÇ | S‚ÇÇ R‚ÇÅ := S‚ÇÅ | S‚ÇÇ R‚ÇÇ := S‚ÇÄ
  | S‚ÇÇ S‚ÇÄ := R‚ÇÇ | S‚ÇÇ S‚ÇÅ := R‚ÇÅ | S‚ÇÇ S‚ÇÇ := R‚ÇÄ

  @[hott] instance D‚ÇÉ.has_one : has_one D‚ÇÉ.carrier := ‚ü®R‚ÇÄ‚ü©
  @[hott] instance D‚ÇÉ.has_inv : has_inv D‚ÇÉ.carrier := ‚ü®D‚ÇÉ.inv‚ü©
  @[hott] instance D‚ÇÉ.has_mul : has_mul D‚ÇÉ.carrier := ‚ü®D‚ÇÉ.mul‚ü©

  def D‚ÇÉ.elim {Œ≤ : Type u} : Œ≤ ‚Üí Œ≤ ‚Üí Œ≤ ‚Üí Œ≤ ‚Üí Œ≤ ‚Üí Œ≤ ‚Üí D‚ÇÉ.carrier ‚Üí Œ≤ :=
  @D‚ÇÉ.carrier.rec (Œª _, Œ≤)

  @[hott] def D‚ÇÉ : pregroup :=
  begin
    fapply pregroup.intro, exact D‚ÇÉ.carrier,
    apply Hedberg, intros x y, induction x; induction y;
    try { apply sum.inl, refl },
    repeat { apply sum.inr, intro p, apply ff_neq_tt, symmetry },
    repeat { apply (D‚ÇÉ.elim tt ff ff ff ff ff) # p },
    repeat { apply (D‚ÇÉ.elim ff tt ff ff ff ff) # p },
    repeat { apply (D‚ÇÉ.elim ff ff tt ff ff ff) # p },
    repeat { apply (D‚ÇÉ.elim ff ff ff tt ff ff) # p },
    repeat { apply (D‚ÇÉ.elim ff ff ff ff ff tt) # p },
    repeat { apply (D‚ÇÉ.elim ff ff ff ff tt ff) # p },
    exact D‚ÇÉ.mul, exact D‚ÇÉ.inv, exact R‚ÇÄ
  end

  @[hott] instance D‚ÇÉ.semigroup : semigroup D‚ÇÉ.magma :=
  ‚ü®begin intros a b c, induction a; induction b; induction c; trivial end‚ü©

  @[hott] instance D‚ÇÉ.monoid : monoid D‚ÇÉ.premonoid :=
  ‚ü®D‚ÇÉ.semigroup,
    begin intro a; induction a; trivial end,
    begin intro a; induction a; trivial end‚ü©

  @[hott] instance D‚ÇÉ.group : group D‚ÇÉ :=
  ‚ü®D‚ÇÉ.monoid, begin intro a, induction a; trivial end‚ü©

  @[hott] def A‚ÇÉ.set : D‚ÇÉ.subset :=
  ‚ü®D‚ÇÉ.elim ùüè ùüè ùüè ùüé ùüé ùüé, begin
    intros x, induction x,
    repeat { apply ground_zero.structures.unit_is_prop },
    repeat { apply ground_zero.structures.empty_is_prop }
  end‚ü©

  @[hott] def A‚ÇÉ : D‚ÇÉ.subgroup :=
  begin
    fapply pregroup.subgroup.mk, exact A‚ÇÉ.set,
    { apply ‚òÖ },
    { intros a b p q, induction a; induction b;
      induction p; induction q; apply ‚òÖ },
    { intros a p, induction a; induction p; apply ‚òÖ }
  end

  @[hott] instance A‚ÇÉ.normal : D‚ÇÉ ‚äµ A‚ÇÉ :=
  begin
    split, intros g h p; induction g; induction h;
    induction p; apply ‚òÖ
  end

  def D‚ÇÉ.inj : D‚ÇÉ.carrier ‚Üí factor_left D‚ÇÉ A‚ÇÉ := @factor.incl D‚ÇÉ _ A‚ÇÉ _

  @[hott] def Z‚ÇÇ.encode : Z‚ÇÇ.carrier ‚Üí factor_left D‚ÇÉ A‚ÇÉ
  | ff := D‚ÇÉ.inj R‚ÇÄ
  | tt := D‚ÇÉ.inj S‚ÇÄ

  @[hott] def Z‚ÇÇ.decode : factor_left D‚ÇÉ A‚ÇÉ ‚Üí Z‚ÇÇ.carrier :=
  begin
    fapply ground_zero.HITs.quotient.rec,
    { exact D‚ÇÉ.elim ff ff ff tt tt tt },
    { intros x y H; induction x; induction y; induction H; trivial },
    { intros a b, apply Z‚ÇÇ.set }
  end

  @[hott] noncomputable def Z‚ÇÇ.iso : Z‚ÇÇ ‚âÖ D‚ÇÉ\A‚ÇÉ :=
  begin
    fapply mkiso, exact Z‚ÇÇ.encode,
    { intros x y, induction x; induction y; trivial },
    split; existsi Z‚ÇÇ.decode,
    { intro x, induction x; trivial },
    { fapply HITs.quotient.ind,
      { intro x, induction x; apply HITs.quotient.sound; exact ‚òÖ },
      { intros x y H, apply HITs.quotient.set },
      { intro x, apply structures.prop_is_set,
        apply HITs.quotient.set } }
  end
end group

end ground_zero.algebra